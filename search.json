[{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Get started","text":"MotifPeeker package facilitates comparison validation datasets epigenomic profiling methods, using motif enrichment key benchmark. package generates comprehensive summary report results various downstream analyses processing peak, alignment, motif files. allows detailed statistical analysis multiple epigenomic datasets without coding, ensuring accessibility robustness.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get started","text":"rapidly advancing field epigenomics led development various techniques profiling protein interactions DNA, enhancing understanding gene regulatory mechanisms genetic factors behind complex diseases. However, validation newer methods, CUT&RUN, CUT&TAG TIP-Seq, remains critical area requires exploration, especially given potential address challenges traditional ChIP-Seq. Common epigenomic profiling techniques rely target proteins, transcriptional regulator CTCF, binding respective sites DNA isolate sequences sequencing. binding sites may contain specific sequences recognised transcription factors, called motifs. Unlike comparison tools like ChIPseeker EpiCompare, MotifPeeker checks presence motifs sequences enriched epigenomic profiling methods novel strategy benchmark . time, general metrics like FRiP scores peak width distributions also reported add context comparisons. goal remains benchmark different epigenomic datasets, MotifPeeker can also used compare effects various downstream processing, thresholds peak calling choice peak caller . package can also help identify differences arising different experimental conditions protocol optimisations.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Get started","text":"MotifPeeker comes small subset two epigenomic datasets targeting CTCF HCT116 cells, generated using ChIP-Seq TIP-Seq. ChIP-Seq alignment file (CTCF_ChIP_alignment.bam) sourced ENCODE project (Accession: ENCFF091ODJ). TIP-Seq alignment file (CTCF_TIP_alignment.bam) manually processed using nf-core/cutandrun pipeline. raw read files sourced NIH Sequence Read Archives (ID: SRR16963166). alignment files processed using MACS3 peak caller produce respective peak files q-value parameter set 0.01. Two motif files CTCF also bundled package: JASPAR motif file - MA1930.2 JASPAR motif file - MA1102.3 Please note peaks alignments included small subset (chr10:65,654,529-74,841,155) actual data. serves example demonstrate package run tests maintain integrity package.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started","text":"MotifPeeker uses memes relies local install MEME suite, can installed follows: NOTE: important Perl dependencies associated MEME suite also installed, particularly XML::Parser, can installed using following command terminal: information, refer Perl dependency section MEME suite. MEME suite associated Perl dependencies installed, install load MotifPeeker: Alternatively, can use Docker/Singularity container run package ---box.","code":"MEME_VERSION=5.5.5  # or the latest version  wget https://meme-suite.org/meme/meme-software/$MEME_VERSION/meme-$MEME_VERSION.tar.gz tar zxf meme-$MEME_VERSION.tar.gz cd meme-$MEME_VERSION ./configure --prefix=$HOME/meme --with-url=http://meme-suite.org/ \\ --enable-build-libxml2 --enable-build-libxslt make make install  # Add to PATH echo 'export PATH=$HOME/meme/bin:$HOME/meme/libexec/meme-$MEME_VERSION:$PATH' >> ~/.bashrc echo 'export MEME_BIN=$HOME/meme/bin' >> ~/.bashrc source ~/.bashrc cpan install XML::Parser library(MotifPeeker)"},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"running-motifpeeker","dir":"Articles","previous_headings":"","what":"Running MotifPeeker","title":"Get started","text":"example, compare bundled ChIP-Seq dataset TIP-Seq dataset.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"load-the-package","dir":"Articles","previous_headings":"Running MotifPeeker","what":"Load the package","title":"Get started","text":"installed, load package using:","code":"library(MotifPeeker)"},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"load-the-example-datasets","dir":"Articles","previous_headings":"Running MotifPeeker","what":"Load the example datasets","title":"Get started","text":"","code":"## Peak files processed using read_peak_file() data(\"CTCF_ChIP_peaks\", package = \"MotifPeeker\") data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\")  ## Motif files processed using read_motif_file() data(\"motif_MA1102.3\", package = \"MotifPeeker\") data(\"motif_MA1930.2\", package = \"MotifPeeker\")"},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"peak-files","dir":"Articles","previous_headings":"Running MotifPeeker > Prepare input data","what":"Peak Files","title":"Get started","text":"MotifPeeker accepts lists GRanges objects produced read_peak_file(), paths MACS2/3 .narrowPeak files SEACR .bed files, ENCODE file IDs automatically download respective files. example, use bundled GRanges peaks:","code":"## MACS2/3 peak files peak_files <- list(\"/path/to/peak1.narrowPeak\", \"/path/to/peak2.narrowPeak\")  ## or SEACR peak files peak_files <- list(\"/path/to/peak1.bed\", \"/path/to/peak2.bed\") peak_files <- list(CTCF_ChIP_peaks, CTCF_TIP_peaks)"},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"alignment-files","dir":"Articles","previous_headings":"Running MotifPeeker > Prepare input data","what":"Alignment Files","title":"Get started","text":"Optionally provide list path .bam alignment files, ENCODE file IDs generate additional comparisons like FRiP scores. example, use built-alignment files.","code":"## Alignment files CTCF_ChIP_alignment <- system.file(\"extdata\", \"CTCF_ChIP_alignment.bam\",                                     package = \"MotifPeeker\") CTCF_TIP_alignment <- system.file(\"extdata\", \"CTCF_TIP_alignment.bam\",                                     package = \"MotifPeeker\")  alignment_files <- list(CTCF_ChIP_alignment, CTCF_TIP_alignment)"},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"motif-files","dir":"Articles","previous_headings":"Running MotifPeeker > Prepare input data","what":"Motif Files","title":"Get started","text":"MotifPeeker accepts list either universalmotif objects, paths .jaspar files. use JASPAR motif files, recommended label using motif_labels parameter MotifPeeker() function. example, use bundled universalmotif motifs:","code":"## JASPAR motif files motif_files <- list(\"/path/to/motif1.jaspar\", \"/path/to/motif2.jaspar\") motif_files <- list(motif_MA1102.3, motif_MA1930.2)"},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"run-motifpeeker","dir":"Articles","previous_headings":"Running MotifPeeker","what":"Run MotifPeeker","title":"Get started","text":"report can generated using main function MotifPeeker(). run customisations, refer next sections.","code":"if (MotifPeeker:::confirm_meme_install(continue = TRUE)) {     MotifPeeker(         peak_files = peak_files,         reference_index = 2,  # Set TIP-seq experiment as reference         alignment_files = alignment_files,         exp_labels = c(\"ChIP\", \"TIP\"),         exp_type = c(\"chipseq\", \"tipseq\"),         genome_build = \"hg38\",  # Use hg38 genome build         motif_files = motif_files,         cell_counts = NULL,  # No cell-count information         denovo_motif_discovery = TRUE,         denovo_motifs = 3,  # Discover top 3 motifs         motif_db = NULL,  # Use default motif database (JASPAR)         download_buttons = TRUE,         out_dir = tempdir(),  # Save output in a temporary directory         workers = 2,  # Use two CPU cores on a 16GB RAM machine         debug = FALSE,         quiet = TRUE,         verbose = TRUE     ) } ## Warning in system2(\"echo\", args = paste0(..., collpase = \"\")): error in running ## command ## [1] \"/tmp/RtmpTyWyMX/MotifPeeker_20241021_135559\""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"required-inputs","dir":"Articles","previous_headings":"Running MotifPeeker > Run MotifPeeker","what":"Required Inputs","title":"Get started","text":"input parameters must provided: peak_files: list path peak files GRanges objects peaks analyse. Currently, peak files MACS2/3 (.narrowPeak) SEACR (.bed) supported. ENCODE file IDs can also provided automatically fetch peak file(s) ENCODE database. reference_index: integer specifying index reference dataset peak_files list use reference various comparisons. (default = 1) genome_build: character string BSgenome object specifying genome build datasets. moment, hg38 hg19 supported abbreviated input. out_dir: character string specifying output directory save HTML report files.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"optional-inputs","dir":"Articles","previous_headings":"Running MotifPeeker > Run MotifPeeker","what":"Optional Inputs","title":"Get started","text":"input parameters optional, recommended add analyses, enhance : alignment_files: list path alignment files Rsamtools::BamFile objects alignment sequences analyse. Alignment files used calculate read-related metrics like FRiP score. ENCODE file IDs can also provided automatically fetch alignment file(s) ENCODE database. exp_labels: character vector labels peak file. provided, capital letters used labels report. exp_type: character vector experimental types peak file. Useful comparison different methods. provided, datasets classified “unknown” experiment types report. exp_type used labelling. affect analyses. can also input custom strings. Datasets grouped long match respective exp_type. Supported experimental types : - chipseq: ChIP-seq data - tipseq: TIP-seq data - cuttag: CUT&Tag data - cutrun: CUT&Run data motif_files: character vector path motif files, vector universalmotif-class objects. Required run Known Motif Enrichment Analysis. JASPAR matrix IDs can also provided automatically fetch motifs JASPAR. motif_labels: character vector labels motif file. used path file names passed motif_files. provided, motif file names used labels. cell_counts: integer vector experiment cell counts peak file (available). Creates additional comparisons based cell counts. motif_db: Path .meme format file use reference database, list universalmotif-class objects. Results de-novo motif discovery searched database find similar motifs. provided, JASPAR CORE database used, making parameter truly optional. NOTE: p-value estimates inaccurate database fewer 50 entries.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"other-options","dir":"Articles","previous_headings":"Running MotifPeeker > Run MotifPeeker","what":"Other Options","title":"Get started","text":"information additional parameters, please refer documentation MotifPeeker().","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"runtime","dir":"Articles","previous_headings":"Running MotifPeeker > Run MotifPeeker","what":"Runtime Guidance","title":"Get started","text":"4 datasets, runtime approximately 3 minutes denovo_motif_discovery disabled. However, de-novo motif discovery can take hours complete. make computation faster, highly recommend tuning following arguments: workers: Running motif discovery parallel can significantly reduce runtime, memory-intensive, consuming upwards 10GB RAM per thread. Memory starvation can greatly slow process, set workers caution. denovo_motifs: number motifs discover per sequence group exponentially increases runtime. recommend 5 motifs make meaningful inference. trim_seq_width: Trimming sequences running de-novo motif discovery can significantly reduce search space. Sequence length can exponentially increase runtime. recommend running script denovo_motif_discovery = FALSE studying motif-summit distance distribution general metrics find sequence length captures motifs. good starting point 150 can reduced appropriate.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"outputs","dir":"Articles","previous_headings":"Running MotifPeeker","what":"Outputs","title":"Get started","text":"MotifPeeker generates output new folder within out_dir directory. folder named MotifPeeker_YYYYMMDD_HHMMSS contains following files: MotifPeeker.html: main HTML report, including analyses plots. Output various MEME suite tools respecive sub-directories, save_runfiles set TRUE.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"troubleshooting","dir":"Articles","previous_headings":"Running MotifPeeker","what":"Troubleshooting","title":"Get started","text":"something work expected, refer troubleshooting.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"future-enhancements","dir":"Articles","previous_headings":"","what":"Future Enhancements","title":"Get started","text":"Add support outputs peak callers. Automatically detect ideal trim_peak_width reduce de-novo motif discovery runtime. Add troubleshooting steps documentation.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/MotifPeeker.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Get started","text":"","code":"utils::sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] MotifPeeker_0.99.5 ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3                jsonlite_1.8.9                    ##   [3] magrittr_2.0.3                    farver_2.1.2                      ##   [5] rmarkdown_2.28                    fs_1.6.4                          ##   [7] BiocIO_1.15.2                     zlibbioc_1.51.1                   ##   [9] ragg_1.3.2                        vctrs_0.6.5                       ##  [11] memoise_2.0.1                     Rsamtools_2.21.2                  ##  [13] b64_0.1.3                         RCurl_1.98-1.16                   ##  [15] webshot_0.5.5                     htmltools_0.5.8.1                 ##  [17] S4Arrays_1.5.11                   curl_5.2.3                        ##  [19] SparseArray_1.5.45                sass_0.4.9                        ##  [21] bslib_0.8.0                       htmlwidgets_1.6.4                 ##  [23] desc_1.4.3                        plyr_1.8.9                        ##  [25] testthat_3.2.1.1                  lubridate_1.9.3                   ##  [27] plotly_4.10.4                     cachem_1.1.0                      ##  [29] GenomicAlignments_1.41.0          mime_0.12                         ##  [31] downloadthis_0.4.1                lifecycle_1.0.4                   ##  [33] iterators_1.0.14                  pkgconfig_2.0.3                   ##  [35] Matrix_1.7-0                      R6_2.5.1                          ##  [37] fastmap_1.2.0                     GenomeInfoDbData_1.2.13           ##  [39] MatrixGenerics_1.17.0             digest_0.6.37                     ##  [41] colorspace_2.1-1                  S4Vectors_0.43.2                  ##  [43] rprojroot_2.0.4                   pkgload_1.4.0                     ##  [45] crosstalk_1.2.1                   textshaping_0.4.0                 ##  [47] GenomicRanges_1.57.2              RSQLite_2.3.7                     ##  [49] seriation_1.5.6                   bsplus_0.1.4                      ##  [51] labeling_0.4.3                    filelock_1.0.3                    ##  [53] timechange_0.3.0                  fansi_1.0.6                       ##  [55] httr_1.4.7                        abind_1.4-8                       ##  [57] compiler_4.4.1                    withr_3.0.1                       ##  [59] bit64_4.5.2                       BiocParallel_1.39.0               ##  [61] viridis_0.6.5                     DBI_1.2.3                         ##  [63] heatmaply_1.5.0                   dendextend_1.18.1                 ##  [65] R.utils_2.12.3                    MASS_7.3-61                       ##  [67] DelayedArray_0.31.14              rjson_0.2.23                      ##  [69] tools_4.4.1                       zip_2.3.1                         ##  [71] ggseqlogo_0.2                     R.oo_1.26.0                       ##  [73] glue_1.8.0                        restfulr_0.0.15                   ##  [75] grid_4.4.1                        reshape2_1.4.4                    ##  [77] generics_0.1.3                    gtable_0.3.5                      ##  [79] BSgenome_1.73.1                   tzdb_0.4.0                        ##  [81] R.methodsS3_1.8.2                 ca_0.71.1                         ##  [83] tidyr_1.3.1                       data.table_1.16.2                 ##  [85] hms_1.1.3                         utf8_1.2.4                        ##  [87] XVector_0.45.0                    BiocGenerics_0.51.3               ##  [89] memes_1.13.1                      stringr_1.5.1                     ##  [91] foreach_1.5.2                     pillar_1.9.0                      ##  [93] dplyr_1.1.4                       BiocFileCache_2.13.2              ##  [95] lattice_0.22-6                    rtracklayer_1.65.0                ##  [97] bit_4.5.0                         universalmotif_1.23.8             ##  [99] tidyselect_1.2.1                  BSgenome.Hsapiens.UCSC.hg38_1.4.5 ## [101] registry_0.5-1                    Biostrings_2.73.2                 ## [103] knitr_1.48                        gridExtra_2.3                     ## [105] IRanges_2.39.2                    SummarizedExperiment_1.35.4       ## [107] cmdfun_1.0.2                      stats4_4.4.1                      ## [109] xfun_0.48                         Biobase_2.65.1                    ## [111] brio_1.1.5                        matrixStats_1.4.1                 ## [113] DT_0.33                           stringi_1.8.4                     ## [115] UCSC.utils_1.1.0                  lazyeval_0.2.2                    ## [117] yaml_2.3.10                       evaluate_1.0.1                    ## [119] codetools_0.2-20                  tibble_3.2.1                      ## [121] cli_3.6.3                         systemfonts_1.1.0                 ## [123] munsell_0.5.1                     jquerylib_0.1.4                   ## [125] Rcpp_1.0.13                       GenomeInfoDb_1.41.2               ## [127] emoji_15.0                        dbplyr_2.5.0                      ## [129] XML_3.99-0.17                     parallel_4.4.1                    ## [131] pkgdown_2.1.1                     ggplot2_3.5.1                     ## [133] readr_2.1.5                       assertthat_0.2.1                  ## [135] blob_1.2.4                        bitops_1.0-9                      ## [137] viridisLite_0.4.2                 scales_1.3.0                      ## [139] purrr_1.0.2                       crayon_1.5.3                      ## [141] rlang_1.1.4                       TSP_1.2-4                         ## [143] waldo_0.5.3"},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/docker.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Docker/Singularity Containers","text":"MotifPeeker now available via ghcr.io containerised environment Rstudio necessary dependencies pre-installed.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/docker.html","id":"method-1-via-docker","dir":"Articles","previous_headings":"Installation","what":"Method 1: via Docker","title":"Docker/Singularity Containers","text":"First, install Docker already. Create image Docker container command line: image created, can launch :","code":"docker pull ghcr.io/neurogenomics/motifpeeker docker run \\     -d \\     -e ROOT=true \\     -e PASSWORD=\"<your_password>\" \\     -v ~/Desktop:/Desktop \\     -v /Volumes:/Volumes \\     -p 8900:8787 \\     ghcr.io/neurogenomics/motifpeeker"},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/docker.html","id":"notes","dir":"Articles","previous_headings":"Installation > Method 1: via Docker","what":"NOTES","title":"Docker/Singularity Containers","text":"Make sure replace <your_password> whatever want password . Change paths supplied -v flags particular use case. -d ensures container run “detached” mode, means persist even ’ve closed command line session. username “rstudio” default. Optionally, can also install Docker Desktop easily manage containers.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/docker.html","id":"method-2-via-singularity","dir":"Articles","previous_headings":"Installation","what":"Method 2: via Singularity","title":"Docker/Singularity Containers","text":"using system allow Docker (case many institutional computing clusters), can instead install Docker images via Singularity. troubleshooting, see Singularity documentation.","code":"singularity pull docker://ghcr.io/neurogenomics/motifpeeker"},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/docker.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Docker/Singularity Containers","text":"Finally, launch containerised Rstudio entering following URL web browser: http://localhost:8900/","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/docker.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Docker/Singularity Containers","text":"","code":"utils::sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] MotifPeeker_0.99.5 ##  ## loaded via a namespace (and not attached): ##   [1] DBI_1.2.3                   bitops_1.0-9                ##   [3] gridExtra_2.3               rlang_1.1.4                 ##   [5] magrittr_2.0.3              matrixStats_1.4.1           ##   [7] compiler_4.4.1              RSQLite_2.3.7               ##   [9] systemfonts_1.1.0           vctrs_0.6.5                 ##  [11] pkgconfig_2.0.3             crayon_1.5.3                ##  [13] fastmap_1.2.0               dbplyr_2.5.0                ##  [15] XVector_0.45.0              memes_1.13.1                ##  [17] ca_0.71.1                   utf8_1.2.4                  ##  [19] Rsamtools_2.21.2            rmarkdown_2.28              ##  [21] tzdb_0.4.0                  UCSC.utils_1.1.0            ##  [23] ragg_1.3.2                  purrr_1.0.2                 ##  [25] bit_4.5.0                   xfun_0.48                   ##  [27] ggseqlogo_0.2               zlibbioc_1.51.1             ##  [29] cachem_1.1.0                GenomeInfoDb_1.41.2         ##  [31] jsonlite_1.8.9              blob_1.2.4                  ##  [33] DelayedArray_0.31.14        BiocParallel_1.39.0         ##  [35] parallel_4.4.1              R6_2.5.1                    ##  [37] bslib_0.8.0                 RColorBrewer_1.1-3          ##  [39] rtracklayer_1.65.0          GenomicRanges_1.57.2        ##  [41] jquerylib_0.1.4             Rcpp_1.0.13                 ##  [43] assertthat_0.2.1            SummarizedExperiment_1.35.4 ##  [45] iterators_1.0.14            knitr_1.48                  ##  [47] readr_2.1.5                 IRanges_2.39.2              ##  [49] Matrix_1.7-0                tidyselect_1.2.1            ##  [51] abind_1.4-8                 yaml_2.3.10                 ##  [53] viridis_0.6.5               TSP_1.2-4                   ##  [55] codetools_0.2-20            curl_5.2.3                  ##  [57] lattice_0.22-6              tibble_3.2.1                ##  [59] Biobase_2.65.1              evaluate_1.0.1              ##  [61] desc_1.4.3                  heatmaply_1.5.0             ##  [63] BiocFileCache_2.13.2        universalmotif_1.23.8       ##  [65] Biostrings_2.73.2           pillar_1.9.0                ##  [67] filelock_1.0.3              MatrixGenerics_1.17.0       ##  [69] DT_0.33                     foreach_1.5.2               ##  [71] stats4_4.4.1                plotly_4.10.4               ##  [73] generics_0.1.3              RCurl_1.98-1.16             ##  [75] hms_1.1.3                   S4Vectors_0.43.2            ##  [77] ggplot2_3.5.1               munsell_0.5.1               ##  [79] scales_1.3.0                glue_1.8.0                  ##  [81] lazyeval_0.2.2              tools_4.4.1                 ##  [83] dendextend_1.18.1           BiocIO_1.15.2               ##  [85] data.table_1.16.2           BSgenome_1.73.1             ##  [87] webshot_0.5.5               GenomicAlignments_1.41.0    ##  [89] registry_0.5-1              fs_1.6.4                    ##  [91] XML_3.99-0.17               grid_4.4.1                  ##  [93] tidyr_1.3.1                 seriation_1.5.6             ##  [95] colorspace_2.1-1            GenomeInfoDbData_1.2.13     ##  [97] restfulr_0.0.15             cli_3.6.3                   ##  [99] textshaping_0.4.0           fansi_1.0.6                 ## [101] S4Arrays_1.5.11             viridisLite_0.4.2           ## [103] dplyr_1.1.4                 gtable_0.3.5                ## [105] sass_0.4.9                  digest_0.6.37               ## [107] BiocGenerics_0.51.3         SparseArray_1.5.45          ## [109] rjson_0.2.23                htmlwidgets_1.6.4           ## [111] memoise_2.0.1               htmltools_0.5.8.1           ## [113] pkgdown_2.1.1               lifecycle_1.0.4             ## [115] httr_1.4.7                  MASS_7.3-61                 ## [117] bit64_4.5.2"},{"path":[]},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/examples.html","id":"ctcf-chip-seq---tip-seq","dir":"Articles","previous_headings":"Reports","what":"CTCF ChIP-seq - TIP-seq","title":"Example Reports","text":"Compares three public ChIP-seq datasets TIP-seq dataset CTCF HCT116 cells. Details datasets used follows: ChIPSeq1 ENCODE Accession: ENCFF172XLC ChIPSeq2 ENCODE Accession: ENCFF411OOS ChIPSeq3 ENCODE Accession: ENCFF091ODJ TIPSeq Alignment file produced running nf-core/cutandrun pipeline raw sequencing data sourced NIH Sequence Read Archives ID: SRR16963166. Peak calling performed using MACS3 using following commands: Motif files used: CTCF motif MA1930.2 CTCFL motif MA1102.3  Code","code":"## For ChIP-Seq datasets MACSr::callpeak(         tfile = ...,         cfile = NULL,  # No control file         nomodel = FALSE,         qvalue = 0.01,         format = \"BAM\",         name = \"chipseq\",         outdir = ...     )      ## For TIP-Seq dataset MACSr::callpeak(         tfile = tipseq_alignment_data,         nomodel = TRUE,         qvalue = 0.01,         shift = -75,  # 5' shift         extsize = 150,         keepduplicates = \"all\",         format = \"BAM\",         name = \"tipseq\",         outdir = ...     )"},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/examples.html","id":"built-in-data","dir":"Articles","previous_headings":"Reports","what":"Built-in data","title":"Example Reports","text":" Code","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/examples.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Example Reports","text":"","code":"utils::sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37     desc_1.4.3        R6_2.5.1          fastmap_1.2.0     ##  [5] xfun_0.48         cachem_1.1.0      knitr_1.48        htmltools_0.5.8.1 ##  [9] rmarkdown_2.28    lifecycle_1.0.4   cli_3.6.3         sass_0.4.9        ## [13] pkgdown_2.1.1     textshaping_0.4.0 jquerylib_0.1.4   systemfonts_1.1.0 ## [17] compiler_4.4.1    tools_4.4.1       ragg_1.3.2        bslib_0.8.0       ## [21] evaluate_1.0.1    yaml_2.3.10       jsonlite_1.8.9    rlang_1.1.4       ## [25] fs_1.6.4          htmlwidgets_1.6.4"},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/troubleshooting.html","id":"meme-suite-related","dir":"Articles","previous_headings":"","what":"MEME Suite Related","title":"Troubleshooting","text":"Error: find MEME Suite ensured MEME Suite installed, still encounter error, set path MEME suite binaries (.../meme/bin/) using meme_path parameter MotifPeeker() function call. Error: Failed generate .html file. Please ensure Perl dependencies required MEME Suite installed, particularly XML::Parser, can installed using following command terminal:bash     cpan install XML::Parser","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/troubleshooting.html","id":"motifpeeker-related","dir":"Articles","previous_headings":"","what":"MotifPeeker() Related","title":"Troubleshooting","text":"Function takes long run likely de-novo motif discovery taking long run. Try reducing number workers running memory running MotifPeeker() function. Additionally, follow runtime guidance MotifPeeker().","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/articles/troubleshooting.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Troubleshooting","text":"","code":"utils::sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37     desc_1.4.3        R6_2.5.1          fastmap_1.2.0     ##  [5] xfun_0.48         cachem_1.1.0      knitr_1.48        htmltools_0.5.8.1 ##  [9] rmarkdown_2.28    lifecycle_1.0.4   cli_3.6.3         sass_0.4.9        ## [13] pkgdown_2.1.1     textshaping_0.4.0 jquerylib_0.1.4   systemfonts_1.1.0 ## [17] compiler_4.4.1    tools_4.4.1       ragg_1.3.2        bslib_0.8.0       ## [21] evaluate_1.0.1    yaml_2.3.10       jsonlite_1.8.9    rlang_1.1.4       ## [25] fs_1.6.4          htmlwidgets_1.6.4"},{"path":"https://neurogenomics.github.io/MotifPeeker/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hiranyamaya Dash. Maintainer, author. Thomas Roberts. Author. Nathan Skene. Author.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dash H, Roberts T, Skene N (2024). MotifPeeker: Benchmarking Epigenomic Profiling Methods Using Motif Enrichment. R package version 0.99.5, https://github.com/neurogenomics/MotifPeeker.","code":"@Manual{,   title = {MotifPeeker: Benchmarking Epigenomic Profiling Methods Using Motif Enrichment},   author = {Hiranyamaya Dash and Thomas Roberts and Nathan Skene},   year = {2024},   note = {R package version 0.99.5},   url = {https://github.com/neurogenomics/MotifPeeker}, }"},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"motifpeeker-benchmarking-epigenomic-profiling-methods-using-motif-enrichment","dir":"","previous_headings":"","what":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"Authors: Hiranyamaya (Hiru) Dash, Thomas Roberts, Nathan SkeneUpdated: Oct-21-2024","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"MotifPeeker used compare analyse datasets epigenomic profiling methods motif enrichment key benchmark. package outputs HTML report consisting three sections: General Metrics: Provides overview metrics related dataset peaks, including FRiP scores, peak widths, motif--summit distances. Known Motif Enrichment Analysis: Presents statistics frequency enriched user-supplied motifs datasets compares common unique peaks comparison reference datasets. De-Novo Motif Enrichment Analysis: Details statistics de-novo discovered motifs common unique peaks comparison reference datasets. Examines motif similarities identifies closest known motifs JASPAR provided database.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"MotifPeeker uses memes relies local install MEME suite, can installed follows: NOTE: important Perl dependencies associated MEME suite also installed, particularly XML::Parser, can installed using following command terminal: information, refer Perl dependency section MEME suite. MEME suite associated Perl dependencies installed, development version MotifPeeker can installed using following code: Alternatively, can use Docker/Singularity container run package ---box.","code":"MEME_VERSION=5.5.5  # or the latest version  wget https://meme-suite.org/meme/meme-software/$MEME_VERSION/meme-$MEME_VERSION.tar.gz tar zxf meme-$MEME_VERSION.tar.gz cd meme-$MEME_VERSION ./configure --prefix=$HOME/meme --with-url=http://meme-suite.org/ \\ --enable-build-libxml2 --enable-build-libxslt make make install  # Add to PATH echo 'export PATH=$HOME/meme/bin:$HOME/meme/libexec/meme-$MEME_VERSION:$PATH' >> ~/.bashrc echo 'export MEME_BIN=$HOME/meme/bin' >> ~/.bashrc source ~/.bashrc cpan install XML::Parser if(!require(\"remotes\")) install.packages(\"remotes\")  remotes::install_github(\"neurogenomics/MotifPeeker\") library(MotifPeeker)"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"Load package example datasets. Prepare input files. Run MotifPeeker():","code":"library(MotifPeeker) data(\"CTCF_ChIP_peaks\", package = \"MotifPeeker\") data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\") data(\"motif_MA1102.2\", package = \"MotifPeeker\") data(\"motif_MA1930.2\", package = \"MotifPeeker\") peak_files <- list(CTCF_ChIP_peaks, CTCF_TIP_peaks) alignment_files <- list(     system.file(\"extdata\", \"CTCF_ChIP_alignment.bam\", package = \"MotifPeeker\"),     system.file(\"extdata\", \"CTCF_TIP_alignment.bam\", package = \"MotifPeeker\") ) motif_files <- list(motif_MA1102.2, motif_MA1930.2) MotifPeeker(     peak_files = peak_files,     reference_index = 2,  # Set TIP-seq experiment as reference     alignment_files = alignment_files,     exp_labels = c(\"ChIP\", \"TIP\"),     exp_type = c(\"chipseq\", \"tipseq\"),     genome_build = \"hg38\",     motif_files = motif_files,     cell_counts = NULL,  # No cell-count information     denovo_motif_discovery = TRUE,     denovo_motifs = 3,     motif_db = NULL,     download_buttons = TRUE,     out_dir = tempdir(),     workers = 2,     debug = FALSE,     quiet = FALSE,     verbose = TRUE )"},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"required-inputs","dir":"","previous_headings":"Usage","what":"Required Inputs","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"input parameters must provided: peak_files: list path peak files GRanges objects peaks analyse. Currently, peak files MACS2/3 (.narrowPeak) SEACR (.bed) supported. ENCODE file IDs can also provided automatically fetch peak file(s) ENCODE database. reference_index: integer specifying index reference dataset peak_files list use reference various comparisons. (default = 1) genome_build: character string BSgenome object specifying genome build datasets. moment, hg38 hg19 supported abbreviated input. out_dir: character string specifying output directory save HTML report files.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"optional-inputs","dir":"","previous_headings":"Usage","what":"Optional Inputs","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"input parameters optional, recommended add analyses, enhance : alignment_files: list path alignment files Rsamtools::BamFile objects alignment sequences analyse. Alignment files used calculate read-related metrics like FRiP score. ENCODE file IDs can also provided automatically fetch alignment file(s) ENCODE database. exp_labels: character vector labels peak file. provided, capital letters used labels report. chipseq: ChIP-seq data tipseq: TIP-seq data cuttag: CUT&Tag data cutrun: CUT&Run data motif_files: character vector path motif files, vector universalmotif-class objects. Required run Known Motif Enrichment Analysis. JASPAR matrix IDs can also provided automatically fetch motifs JASPAR. motif_labels: character vector labels motif file. used path file names passed motif_files. provided, motif file names used labels. cell_counts: integer vector experiment cell counts peak file (available). Creates additional comparisons based cell counts. motif_db: Path .meme format file use reference database, list universalmotif-class objects. Results de-novo motif discovery searched database find similar motifs. provided, JASPAR CORE database used, making parameter truly optional. NOTE: p-value estimates inaccurate database fewer 50 entries.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"other-options","dir":"","previous_headings":"Usage","what":"Other Options","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"information additional parameters, please refer documentation MotifPeeker().","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"runtime-guidance","dir":"","previous_headings":"Usage","what":"Runtime Guidance","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"4 datasets, runtime approximately 3 minutes denovo_motif_discovery disabled. However, de-novo motif discovery can take hours complete. make computation faster, highly recommend tuning following arguments: workers: Running motif discovery parallel can significantly reduce runtime, memory-intensive, consuming upwards 10GB RAM per thread. Memory starvation can greatly slow process, set workers caution. denovo_motifs: number motifs discover per sequence group exponentially increases runtime. recommend 5 motifs make meaningful inference. trim_seq_width: Trimming sequences running de-novo motif discovery can significantly reduce search space. Sequence length can exponentially increase runtime. recommend running script denovo_motif_discovery = FALSE studying motif-summit distance distribution general metrics find sequence length captures motifs. good starting point 150 can reduced appropriate.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"outputs","dir":"","previous_headings":"Usage","what":"Outputs","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"MotifPeeker generates output new folder within out_dir directory. folder named MotifPeeker_YYYYMMDD_HHMMSS contains following files: MotifPeeker.html: main HTML report, including analyses plots. Output various MEME suite tools respecive sub-directories, save_runfiles set TRUE.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"datasets","dir":"","previous_headings":"","what":"Datasets","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"MotifPeeker comes several datasets bundled: CTCF_TIP_peaks: Human CTCF peak file generated TIP-seq using HCT116 cell-line. control files used generate peak file. peaks called using MACS3 CTCF_TIP_alignment.bam input. CTCF_ChIP_peaks: Human CTCF peak file generated ChIP-seq using HCT116 cell-line. control files used generate peak file. peaks called using MACS3 CTCF_ChIP_alignment.bam input. motif_MA1102.3: JASPAR motif CTCFL (MA1102.3) Homo Sapiens. Sourced JASPAR motif_MA1930.2: JASPAR motif CTCFL (MA1930.2) Homo Sapiens. Sourced JASPAR CTCF_TIP_alignment.bam: Human CTCF alignment file generated TIP-seq using HCT116 cell-line. alignment file generated using nf-core/cutandrun pipeline. Raw read files sourced NIH Sequence Read Archives ID: SRR16963166. available extdata. CTCF_ChIP_alignment.bam: Human CTCF alignment file generated ChIP-seq using HCT116 cell-line. Sourced ENCODE (Accession: ENCFF091ODJ). available extdata. Please note peaks alignments included small subset (chr10:65,654,529-74,841,155) actual data. serves example demonstrate package run tests maintain integrity package.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"licensing-restrictions","dir":"","previous_headings":"","what":"Licensing Restrictions","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"MotifPeeker incorporates MEME Suite, available free charge educational, research, non-profit purposes. Users intending use MotifPeeker commercial purposes required purchase license MEME Suite. details, please refer MEME Suite Copyright Page.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"neurogenomics-lab","dir":"","previous_headings":"Contact","what":"Neurogenomics Lab","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"UK Dementia Research Institute Department Brain Sciences Faculty Medicine Imperial College LondonGitHub","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/index.html","id":"session-info","dir":"","previous_headings":"Contact","what":"Session Info","title":"Benchmarking Epigenomic Profiling Methods Using Motif Enrichment","text":"","code":"utils::sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] rmarkdown_2.28 ##  ## loaded via a namespace (and not attached): ##  [1] gtable_0.3.5        jsonlite_1.8.9      renv_1.0.11         ##  [4] dplyr_1.1.4         compiler_4.4.1      BiocManager_1.30.25 ##  [7] tidyselect_1.2.1    rvcheck_0.2.1       scales_1.3.0        ## [10] yaml_2.3.10         fastmap_1.2.0       here_1.0.1          ## [13] ggplot2_3.5.1       R6_2.5.1            generics_0.1.3      ## [16] knitr_1.48          yulab.utils_0.1.7   tibble_3.2.1        ## [19] desc_1.4.3          dlstats_0.1.7       rprojroot_2.0.4     ## [22] munsell_0.5.1       pillar_1.9.0        RColorBrewer_1.1-3  ## [25] rlang_1.1.4         utf8_1.2.4          badger_0.2.4        ## [28] xfun_0.48           fs_1.6.4            cli_3.6.3           ## [31] magrittr_2.0.3      rworkflows_1.0.2    digest_0.6.37       ## [34] grid_4.4.1          lifecycle_1.0.4     vctrs_0.6.5         ## [37] evaluate_1.0.1      glue_1.8.0          data.table_1.16.2   ## [40] fansi_1.0.6         colorspace_2.1-1    tools_4.4.1         ## [43] pkgconfig_2.0.3     htmltools_0.5.8.1"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/CTCF_ChIP_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Example ChIP-seq peak file — CTCF_ChIP_peaks","title":"Example ChIP-seq peak file — CTCF_ChIP_peaks","text":"Human CTCF peak file generated ChIP-seq using HCT116 cell-line. control files used generate peak file.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/CTCF_ChIP_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example ChIP-seq peak file — CTCF_ChIP_peaks","text":"","code":"data(\"CTCF_ChIP_peaks\")"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/CTCF_ChIP_peaks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example ChIP-seq peak file — CTCF_ChIP_peaks","text":"object class GRanges length 209.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/CTCF_ChIP_peaks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example ChIP-seq peak file — CTCF_ChIP_peaks","text":"ENCODE Accession: ENCFF091ODJ","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/CTCF_ChIP_peaks.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Example ChIP-seq peak file — CTCF_ChIP_peaks","text":"reduce size package, included peak file focuses specific genomic regions. subset region included chr10:65,654,529-74,841,155.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/CTCF_TIP_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Example TIP-seq peak file — CTCF_TIP_peaks","title":"Example TIP-seq peak file — CTCF_TIP_peaks","text":"Human CTCF peak file generated TIP-seq using HCT116 cell-line. peak file generated using nf-core/cutandrun pipeline. Raw read files sourced NIH Sequence Read Archives (ID: SRR16963166).","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/CTCF_TIP_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example TIP-seq peak file — CTCF_TIP_peaks","text":"","code":"data(\"CTCF_TIP_peaks\")"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/CTCF_TIP_peaks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example TIP-seq peak file — CTCF_TIP_peaks","text":"object class GRanges length 182.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/CTCF_TIP_peaks.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Example TIP-seq peak file — CTCF_TIP_peaks","text":"reduce size package, included peak file focuses specific genomic regions. subset region included chr10:65,654,529-74,841,155.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/MotifPeeker.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmark epigenomic profiling methods using motif enrichment — MotifPeeker","title":"Benchmark epigenomic profiling methods using motif enrichment — MotifPeeker","text":"function compares different epigenomic datasets using motif enrichment key metric. output easy--interpret HTML document results. report contains three main sections: (1) General Metrics peak alignment files (provided), (2) Known Motif Enrichment Analysis (3) De-novo Motif Enrichment Analysis.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/MotifPeeker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmark epigenomic profiling methods using motif enrichment — MotifPeeker","text":"","code":"MotifPeeker(   peak_files,   reference_index = 1,   alignment_files = NULL,   exp_labels = NULL,   exp_type = NULL,   genome_build,   motif_files = NULL,   motif_labels = NULL,   cell_counts = NULL,   denovo_motif_discovery = TRUE,   denovo_motifs = 3,   filter_n = 6,   trim_seq_width = NULL,   motif_db = NULL,   download_buttons = TRUE,   meme_path = NULL,   out_dir = tempdir(),   save_runfiles = FALSE,   display = if (interactive()) \"browser\",   workers = 2,   quiet = TRUE,   debug = FALSE,   verbose = FALSE )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/MotifPeeker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmark epigenomic profiling methods using motif enrichment — MotifPeeker","text":"peak_files character vector path peak files, vector GRanges objects generated using read_peak_file. Currently, peak files following peak-calling tools supported: MACS2: .narrowPeak files SEACR: .bed files ENCODE file IDs can also provided automatically fetch peak file(s) ENCODE database. reference_index integer specifying index peak file use reference dataset comparison. Indexing starts 1. (default = 1) alignment_files character vector path alignment files, vector BamFile objects. (optional) Alignment files used calculate read-related metrics like FRiP score. ENCODE file IDs can also provided automatically fetch alignment file(s) ENCODE database. exp_labels character vector labels peak file. (optional) provided, capital letters used labels report. exp_type character vector experimental types peak file. (optional) Useful comparison different methods. provided, datasets classified \"unknown\" experiment types report. Supported experimental types : chipseq: ChIP-seq data tipseq: TIP-seq data cuttag: CUT&Tag data cutrun: CUT&Run data exp_type used labelling. affect analysis. can also input custom strings. Datasets grouped long match respective exp_type. genome_build character string abbreviated genome build name, BSGenome object. moment, hg38 hg19 supported abbreviated input. motif_files character vector path motif files, vector universalmotif-class objects. (optional) Required run Known Motif Enrichment Analysis. JASPAR matrix IDs can also provided automatically fetch motifs JASPAR. motif_labels character vector labels motif file. (optional) used path file names passed motif_files. provided, motif file names used labels. cell_counts integer vector experiment cell counts peak file. (optional) Creates additional comparisons based cell counts. denovo_motif_discovery logical indicating whether perform de-novo motif discovery third section report. (default = TRUE) denovo_motifs integer specifying number de-novo motifs discover. (default = 3) Note higher values take longer compute. filter_n integer specifying number consecutive nucleotide repeats de-novo discovered motif must contain filtered . (default = 6) trim_seq_width integer specifying width sequence extract around summit (default = NULL). sequence used search de novo motifs. provided, entire peak region used. parameter intended reduce search space speed motif discovery; therefore, value less average peak width recommended. Peaks trimmed symmetrically around summit respecting peak bounds. motif_db Path .meme format file use reference database, list universalmotif-class objects. (optional) Results de-novo motif discovery searched database find similar motifs. provided, JASPAR CORE database used. NOTE: p-value estimates inaccurate database fewer 50 entries. download_buttons logical indicating whether include download buttons various files within HTML report. (default = TRUE) meme_path path meme/bin/ (optional). Defaut: NULL, searches \"MEME_PATH\" environment variable \"meme_path\" option path \"meme/bin/\". out_dir character string specifying directory save output files. (default = tempdir()) sub-directory output files created directory. save_runfiles logical indicating whether save intermediate files generated run, FIMO AME. (default = FALSE) display character vector specifying display mode HTML report generated. (default = NULL) Options : \"browser\": Open report default web browser. \"rstudio\": Open report RStudio Viewer. NULL: open report. workers integer specifying number threads use parallel processing. (default = 1)IMPORTANT: worker, please ensure minimum 6GB memory (RAM) available denovo_motif_discovery memory-intensive. quiet logical indicating whether print markdown knit messages. (default = FALSE) debug logical indicating whether print debug/error messages HTML report. (default = FALSE) verbose logical indicating whether print verbose messages running function. (default = FALSE)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/MotifPeeker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benchmark epigenomic profiling methods using motif enrichment — MotifPeeker","text":"Path output directory.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/MotifPeeker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Benchmark epigenomic profiling methods using motif enrichment — MotifPeeker","text":"Runtime guidance: 4 datasets, runtime approximately 3 minutes denovo_motif_discovery disabled. However, de-novo motif discovery can take hours complete. make computation faster, highly recommend tuning following arguments: workers Running motif discovery parallel can     significantly reduce runtime, memory-intensive, consuming     upwards 10GB RAM per thread. Memory starvation can greatly slow     process, set workers caution. denovo_motifs number motifs discover per sequence     group exponentially increases runtime. recommend 5     motifs make meaningful inference. trim_seq_width Trimming sequences running de-novo     motif discovery can significantly reduce search space. Sequence     length can exponentially increase runtime. recommend running     script denovo_motif_discovery = FALSE studying     motif-summit distance distribution general metrics find     sequence length captures motifs. good starting point 150     can reduced appropriate.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/MotifPeeker.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Benchmark epigenomic profiling methods using motif enrichment — MotifPeeker","text":"Running de-novo motif discovery computationally expensive can require minutes hours. denovo_motifs can widely affect runtime (higher values take longer). Setting trim_seq_width lower value can also reduce runtime significantly.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/MotifPeeker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmark epigenomic profiling methods using motif enrichment — MotifPeeker","text":"","code":"peaks <- list(     system.file(\"extdata\", \"CTCF_ChIP_peaks.narrowPeak\",                 package = \"MotifPeeker\"),     system.file(\"extdata\", \"CTCF_TIP_peaks.narrowPeak\",                 package = \"MotifPeeker\") )  alignments <- list(     system.file(\"extdata\", \"CTCF_ChIP_alignment.bam\",                 package = \"MotifPeeker\"),     system.file(\"extdata\", \"CTCF_TIP_alignment.bam\",                 package = \"MotifPeeker\") )  motifs <- list(     system.file(\"extdata\", \"motif_MA1930.2.jaspar\",                 package = \"MotifPeeker\"),     system.file(\"extdata\", \"motif_MA1102.3.jaspar\",                 package = \"MotifPeeker\") )  # \\donttest{     # MotifPeeker takes time to run     MotifPeeker(         peak_files = peaks,         reference_index = 1,         alignment_files = alignments,         exp_labels = c(\"ChIP\", \"TIP\"),         exp_type = c(\"chipseq\", \"tipseq\"),         genome_build = \"hg38\",         motif_files = motifs,         motif_labels = NULL,         cell_counts = NULL,         denovo_motif_discovery = TRUE,         denovo_motifs = 1,         motif_db = NULL,         download_buttons = TRUE,         out_dir = tempdir(),         workers = 1,         debug = FALSE,         quiet = TRUE,         verbose = FALSE     ) #> [1] \"/tmp/RtmpTvT1EX/MotifPeeker_20241021_135414\" # }"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/bpapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Use BiocParallel functions with appropriate parameters — bpapply","title":"Use BiocParallel functions with appropriate parameters — bpapply","text":"Light wrapper around BiocParallel functions automatically sets appropriate parameters based number workers specified.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/bpapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use BiocParallel functions with appropriate parameters — bpapply","text":"","code":"bpapply(   X,   FUN,   apply_fun = BiocParallel::bplapply,   workers = 1,   progressbar = FALSE,   force_snowparam = FALSE,   verbose = FALSE,   ... )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/bpapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use BiocParallel functions with appropriate parameters — bpapply","text":"X object methods length, [,     [[ implemented. FUN function applied element X. apply_fun BiocParallel function use parallel processing. (default = BiocParallel::bplapply) workers number workers use parallel processing. progressbar logical(1) Enable progress bar (based plyr:::progress_text). force_snowparam logical indicating whether force use SnowParam object. verbose logical indicating whether print verbose messages running function. (default = FALSE) ... Arguments passed BiocParallel::bplapply, BiocParallel::bpmapply BPPARAM optional BiocParallelParam instance     determining parallel back-end used evaluation,     list BiocParallelParam instances, applied     sequence nested calls BiocParallel functions. BPREDO list output bplapply one     failed elements. list given BPREDO,     bpok used identify errors, tasks rerun inserted     original results. BPOPTIONS Additional options control behavior parallel evaluation, see bpoptions. MoreArgs List additional arguments FUN. SIMPLIFY TRUE result simplified using     simplify2array. USE.NAMES TRUE result named.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/bpapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use BiocParallel functions with appropriate parameters — bpapply","text":"Output relevant apply_fun specified.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/bpapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use BiocParallel functions with appropriate parameters — bpapply","text":"","code":"half_it <- function(arg1) return(arg1 / 2) x <- seq_len(10)  res <- MotifPeeker:::bpapply(x, half_it, workers = 2) print(res) #> [[1]] #> [1] 0.5 #>  #> [[2]] #> [1] 1 #>  #> [[3]] #> [1] 1.5 #>  #> [[4]] #> [1] 2 #>  #> [[5]] #> [1] 2.5 #>  #> [[6]] #> [1] 3 #>  #> [[7]] #> [1] 3.5 #>  #> [[8]] #> [1] 4 #>  #> [[9]] #> [1] 4.5 #>  #> [[10]] #> [1] 5 #>"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/calc_frip.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate FRiP score — calc_frip","title":"Calculate FRiP score — calc_frip","text":"Calculate Fraction Reads Peak score read peak file experiment.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/calc_frip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate FRiP score — calc_frip","text":"","code":"calc_frip(read_file, peak_file, single_end = TRUE, total_reads = NULL)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/calc_frip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate FRiP score — calc_frip","text":"read_file BamFile object. peak_file GRanges object. single_end logical value. TRUE, reads classified single-ended. (default = TRUE) total_reads (optional) total number reads experiment. Skips counting total number reads provided, saving computation.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/calc_frip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate FRiP score — calc_frip","text":"numeric value indicating FRiP score.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/calc_frip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate FRiP score — calc_frip","text":"FRiP score calculated follows: $$\\text{FRiP} = \\frac{(\\text{number reads peaks})}{\\text{(total number reads)}}$$","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/calc_frip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate FRiP score — calc_frip","text":"","code":"read_file <- system.file(\"extdata\", \"CTCF_ChIP_alignment.bam\",                         package = \"MotifPeeker\") read_file <- Rsamtools::BamFile(read_file) data(\"CTCF_ChIP_peaks\", package = \"MotifPeeker\")  calc_frip(read_file, CTCF_ChIP_peaks) #> [1] 0.2473209"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_ENCODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for ENCODE input — check_ENCODE","title":"Check for ENCODE input — check_ENCODE","text":"Check get files ENCODE project. Requires input ENCODE ID format. Uses BiocFileCache cache downloads. works files.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_ENCODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for ENCODE input — check_ENCODE","text":"","code":"check_ENCODE(encode_id, expect_format, verbose = FALSE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_ENCODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for ENCODE input — check_ENCODE","text":"encode_id character string specifying ENCODE ID. expect_format character string (vector) specifying expected format(s) file. file expected format, error thrown. verbose logical indicating whether print verbose messages running function. (default = FALSE)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_ENCODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for ENCODE input — check_ENCODE","text":"character string specifying path downloaded file. input ENCODE ID format, input returned -.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_ENCODE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for ENCODE input — check_ENCODE","text":"","code":"if (requireNamespace(\"curl\", quietly = TRUE) &&     requireNamespace(\"jsonlite\", quietly = TRUE)) {     check_ENCODE(\"ENCFF920TXI\", expect_format = c(\"bed\", \"gz\")) } #>                                                                 BFC2  #> \"/github/home/.cache/R/BiocFileCache/2b1733c8c7b_ENCFF920TXI.bed.gz\""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_JASPAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for JASPAR input — check_JASPAR","title":"Check for JASPAR input — check_JASPAR","text":"Check get files JASPAR. Requires input JASPAR ID format. Uses BiocFileCache cache downloads.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_JASPAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for JASPAR input — check_JASPAR","text":"","code":"check_JASPAR(motif_id, verbose = FALSE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_JASPAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for JASPAR input — check_JASPAR","text":"motif_id character string specifying JASPAR motif ID. verbose logical indicating whether print verbose messages running function. (default = FALSE)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_JASPAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for JASPAR input — check_JASPAR","text":"character string specifying path downloaded file. input JASPAR ID format, input returned -.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_JASPAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for JASPAR input — check_JASPAR","text":"","code":"check_JASPAR(\"MA1930.2\") #>                                                               BFC3  #> \"/github/home/.cache/R/BiocFileCache/2b177fcd2fd7_MA1930.2.jaspar\""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Check attached dependency — check_dep","title":"Check attached dependency — check_dep","text":"Stop execution package attached.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check attached dependency — check_dep","text":"","code":"check_dep(pkg, fatal = TRUE, custom_msg = NULL)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_dep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check attached dependency — check_dep","text":"pkg character string package name fatal logical value indicating whether stop execution package attached. custom_msg custom message display package attached.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_dep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check attached dependency — check_dep","text":"Null","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicates — check_duplicates","title":"Check for duplicates — check_duplicates","text":"Checks duplicated items vector list throw error found.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicates — check_duplicates","text":"","code":"check_duplicates(x)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicates — check_duplicates","text":"x vector list.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for duplicates — check_duplicates","text":"Null","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_genome_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Check genome build — check_genome_build","title":"Check genome build — check_genome_build","text":"Check genome build valid return appropriate BSGenome object.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_genome_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check genome build — check_genome_build","text":"","code":"check_genome_build(genome_build)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_genome_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check genome build — check_genome_build","text":"genome_build character string abbreviated genome build name, BSGenome object. moment, hg38 hg19 supported abbreviated input.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_genome_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check genome build — check_genome_build","text":"BSGenome object.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/check_genome_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check genome build — check_genome_build","text":"","code":"if (requireNamespace(\"BSgenome.Hsapiens.UCSC.hg38\", quietly = TRUE)) {     check_genome_build(\"hg38\") } #> | BSgenome object for Human #> | - organism: Homo sapiens #> | - provider: UCSC #> | - genome: hg38 #> | - release date: 2023/01/31 #> | - 711 sequence(s): #> |     chr1                    chr2                    chr3                    #> |     chr4                    chr5                    chr6                    #> |     chr7                    chr8                    chr9                    #> |     chr10                   chr11                   chr12                   #> |     chr13                   chr14                   chr15                   #> |     ...                     ...                     ...                     #> |     chr19_KV575256v1_alt    chr19_KV575257v1_alt    chr19_KV575258v1_alt    #> |     chr19_KV575259v1_alt    chr19_KV575260v1_alt    chr19_MU273387v1_alt    #> |     chr22_KN196485v1_alt    chr22_KN196486v1_alt    chr22_KQ458387v1_alt    #> |     chr22_KQ458388v1_alt    chr22_KQ759761v1_alt    chrX_KV766199v1_alt     #> |     chrX_MU273395v1_alt     chrX_MU273396v1_alt     chrX_MU273397v1_alt     #> |  #> | Tips: call 'seqnames()' on the object to get all the sequence names, call #> | 'seqinfo()' to get the full sequence info, use the '$' or '[[' operator to #> | access a given sequence, see '?BSgenome' for more information."},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/confirm_meme_install.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop if MEME suite is not installed — confirm_meme_install","title":"Stop if MEME suite is not installed — confirm_meme_install","text":"Stop MEME suite installed","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/confirm_meme_install.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop if MEME suite is not installed — confirm_meme_install","text":"","code":"confirm_meme_install(meme_path = NULL, continue = FALSE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/confirm_meme_install.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop if MEME suite is not installed — confirm_meme_install","text":"meme_path path meme/bin/ (optional). Defaut: NULL, searches \"MEME_PATH\" environment variable \"meme_path\" option path \"meme/bin/\". continue Continue code execution MEME suite installed.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/confirm_meme_install.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop if MEME suite is not installed — confirm_meme_install","text":"Null","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/denovo_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find de-novo motifs in sequences — denovo_motifs","title":"Find de-novo motifs in sequences — denovo_motifs","text":"Use STREME MEME suite find de-novo motifs provided sequences. speed process, sequences can optionally trimmed reduce search space. result optionally filtered remove motifs high number nucleotide repeats","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/denovo_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find de-novo motifs in sequences — denovo_motifs","text":"","code":"denovo_motifs(   seqs,   trim_seq_width,   genome_build,   denovo_motifs = 3,   minw = 8,   maxw = 25,   filter_n = 6,   out_dir = tempdir(),   meme_path = NULL,   workers = 1,   verbose = FALSE,   debug = FALSE,   ... )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/denovo_motifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find de-novo motifs in sequences — denovo_motifs","text":"seqs list GRanges objects containing sequences search motifs. trim_seq_width integer specifying width sequence extract around summit (default = NULL). sequence used search de novo motifs. provided, entire peak region used. parameter intended reduce search space speed motif discovery; therefore, value less average peak width recommended. Peaks trimmed symmetrically around summit respecting peak bounds. genome_build genome build peak sequences derived . denovo_motifs integer specifying number de-novo motifs discover. (default = 3) Note higher values take longer compute. minw integer specifying minimum width motif. (default = 8) maxw integer specifying maximum width motif. (default = 25) filter_n integer specifying number consecutive nucleotide repeats de-novo discovered motif must contain filtered . (default = 6) out_dir character vector output directory save STREME results . (default = tempdir()) meme_path path \"meme/bin/\" (default: NULL). use default search behavior described check_meme_install() unset. workers number workers use parallel processing. verbose logical indicating whether print verbose messages running function. (default = FALSE) debug logical indicating whether print debug/error messages HTML report. (default = FALSE) ... Additional arguments pass STREME. information, refer official MEME Suite documentation STREME.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/denovo_motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find de-novo motifs in sequences — denovo_motifs","text":"list universalmotif objects associated metadata.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/denovo_motifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find de-novo motifs in sequences — denovo_motifs","text":"","code":"data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\") if (requireNamespace(\"BSgenome.Hsapiens.UCSC.hg38\", quietly = TRUE)) {     genome_build <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38         res <- denovo_motifs(list(CTCF_TIP_peaks),                         trim_seq_width = 100,                         genome_build = genome_build,                         denovo_motifs = 2,                         filter_n = 6,                         out_dir = tempdir())     print(res[[1]]$consensus) } #> Warning: p-values will be inaccurate if primary and control #> Warning: p-values will be inaccurate if primary and control #> [1] \"GCCMYCTGSTGGC\" \"GGAAGTAA\""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/download_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a download button — download_button","title":"Create a download button — download_button","text":"Creates download button file directory, suitable embed HTML report.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/download_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a download button — download_button","text":"","code":"download_button(   path,   type,   button_label,   output_name = NULL,   button_type = \"success\",   has_icon = TRUE,   icon = \"fa fa-save\",   add_button = TRUE,   ... )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/download_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a download button — download_button","text":"path character string specifying path file directory. type character string specifying type download. Either \"file\" \"dir\". button_label Character (HTML), button label output_name Name output file. specified, take source file's name one file specified. case multiple files, output_name must specified. button_type Character, one standard Bootstrap types has_icon Specify whether include fontawesome icons button label icon Fontawesome tag e.g.: \"fa fa-save\" add_button logical indicating whether add download button HTML report. (default = TRUE) ... Arguments passed downloadthis::download_file self_contained boolean specify whether HTML output self-contained. Default FALSE.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/download_button.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a download button — download_button","text":"htmltools::tag, <button>","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/dt_enrichment_individual.html","id":null,"dir":"Reference","previous_headings":"","what":"Get datatable for motif-enrichment of individual experiments. — dt_enrichment_individual","title":"Get datatable for motif-enrichment of individual experiments. — dt_enrichment_individual","text":"Get datatable motif-enrichment individual experiments.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/dt_enrichment_individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get datatable for motif-enrichment of individual experiments. — dt_enrichment_individual","text":"","code":"dt_enrichment_individual(   result,   enrichment_df,   comparison_i,   motif_i,   reference_index = 1 )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/dt_enrichment_individual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get datatable for motif-enrichment of individual experiments. — dt_enrichment_individual","text":"result list following elements: peaks list peak files generated using read_peak_file. alignments list alignment files. exp_type character vector experiment types. exp_labels character vector experiment labels. read_count numeric vector read counts. peak_count numeric vector peak counts. enrichment_df data frame containing motif enrichment results, produced using get_df_enrichment. comparison_i index comparison dataset plot. motif_i index motif plot. reference_index integer specifying index peak file use reference dataset comparison. Indexing starts 1. (default = 1)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/dt_enrichment_individual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get datatable for motif-enrichment of individual experiments. — dt_enrichment_individual","text":"DT::datatable object peak motif enrichment data specified comparison_i motif_i.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/filter_repeats.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter motifs with nucleotide repeats — filter_repeats","title":"Filter motifs with nucleotide repeats — filter_repeats","text":"Filter motifs contain filter_n consecutive nucleotide repeats. includes unambiguous bases 'Y', 'N, 'R', etc.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/filter_repeats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter motifs with nucleotide repeats — filter_repeats","text":"","code":"filter_repeats(motifs, filter_n = 6)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/filter_repeats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter motifs with nucleotide repeats — filter_repeats","text":"motifs Output runStreme. filter_n Minimum number consecutive nucleotide repeats filter.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/filter_repeats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter motifs with nucleotide repeats — filter_repeats","text":"list object structure motifs motifs containing filter_n consecutive nucleotide repeats removed.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/find_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find similar motifs — find_motifs","title":"Find similar motifs — find_motifs","text":"Search provided motif database find similar motifs input. Light wrapper around TOMTOM MEME Suite.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/find_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find similar motifs — find_motifs","text":"","code":"find_motifs(   streme_out,   motif_db,   out_dir = tempdir(),   meme_path = NULL,   workers = 1,   verbose = FALSE,   debug = FALSE,   ... )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/find_motifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find similar motifs — find_motifs","text":"streme_out Output denovo_motifs. motif_db Path .meme format file use reference database, list universalmotif-class objects. (optional) Results de-novo motif discovery searched database find similar motifs. provided, JASPAR CORE database used. NOTE: p-value estimates inaccurate database fewer 50 entries. out_dir character vector output directory save STREME results . (default = tempdir()) meme_path path \"meme/bin/\" (default: NULL). use default search behavior described check_meme_install() unset. workers number workers use parallel processing. verbose logical indicating whether print verbose messages running function. (default = FALSE) debug logical indicating whether print debug/error messages HTML report. (default = FALSE) ... Additional arguments pass TOMTOM. information, refer official MEME Suite documentation TOMTOM.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/find_motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find similar motifs — find_motifs","text":"data.frame match results. Contains best_match_motif column universalmotif objects matched PWM database, series best_match_* columns describing TomTom results match, tomtom list column storing ranked list possible matches motif. universalmotif data.frame used input, columns appended data.frame. matches returned, tomtom best_match_motif columns set NA message indicating print.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/find_motifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find similar motifs — find_motifs","text":"","code":"data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\")      # \\donttest{     if (requireNamespace(\"BSgenome.Hsapiens.UCSC.hg38\", quietly = TRUE)) {         genome_build <-             BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38             res <- denovo_motifs(list(CTCF_TIP_peaks),                         trim_seq_width = 100,                         genome_build = genome_build,                         denovo_motifs = 2,                         filter_n = 6,                         out_dir = tempdir())         res2 <- find_motifs(res, motif_db = get_JASPARCORE(),                             out_dir = tempdir())         print(res2)     } #> Warning: p-values will be inaccurate if primary and control #> Warning: p-values will be inaccurate if primary and control #> [[1]] #> [[1]][[1]] #>          motif              name  altname     consensus alphabet strand #> 1 <mot:m01_..> m01_GCCCTCTGSTGGC STREME-1 GCCMYCTGSTGGC      DNA     +- #>    icscore nsites pval type pseudocount          bkg best_match_name #> 1 15.22492     54 0.12  PCM           0 0.241, 0....        MA0139.2 #>   best_match_altname                                             best_db_name #> 1               CTCF 2037631a6286_JASPAR2024_CORE_non-redundant_pfms_meme.txt #>   best_match_offset best_match_pval best_match_eval best_match_qval #> 1                 2        3.33e-13        7.81e-10        1.56e-09 #>   best_match_strand best_match_motif       tomtom #> 1                 -     <mot:MA01..> c(\"MA013.... #>  #> [Hidden empty columns: family, organism, bkgsites, qval, eval.] #>  #> [[1]][[2]] #>          motif         name  altname consensus alphabet strand icscore nsites #> 1 <mot:m02_..> m02_GGAAGTAA STREME-2  GGAAGTAA      DNA     +- 10.9251     21 #>   pval type pseudocount          bkg best_match_name best_match_altname #> 1  0.5  PCM           0 0.241, 0....        MA1931.1        ELK1::HOXA1 #>                                               best_db_name best_match_offset #> 1 2037631a6286_JASPAR2024_CORE_non-redundant_pfms_meme.txt                 3 #>   best_match_pval best_match_eval best_match_qval best_match_strand #> 1        1.55e-05          0.0365          0.0725                 + #>   best_match_motif       tomtom #> 1     <mot:MA19..> c(\"MA193.... #>  #> [Hidden empty columns: family, organism, bkgsites, qval, eval.] #>  #>  # }"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/format_exptype.html","id":null,"dir":"Reference","previous_headings":"","what":"Format exp_type — format_exptype","title":"Format exp_type — format_exptype","text":"Format input exp_type look pretty.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/format_exptype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format exp_type — format_exptype","text":"","code":"format_exptype(exp_type)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/format_exptype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format exp_type — format_exptype","text":"exp_type character depicting type experiment. Supported experimental types : chipseq: ChIP-seq data tipseq: TIP-seq data cuttag: CUT&Tag data cutrun: CUT&Run data : experiment type data unknown: Unknown experiment type data item mentioned returned -.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/format_exptype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format exp_type — format_exptype","text":"character vector formatted exp_type.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/format_exptype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format exp_type — format_exptype","text":"","code":"MotifPeeker:::format_exptype(\"chipseq\") #> [1] \"ChIP-Seq\""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_JASPARCORE.html","id":null,"dir":"Reference","previous_headings":"","what":"Download JASPAR CORE database — get_JASPARCORE","title":"Download JASPAR CORE database — get_JASPARCORE","text":"Downloads JASPAR CORE database meme format available taxonomic groups. Uses BiocFileCache cache downloads.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_JASPARCORE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download JASPAR CORE database — get_JASPARCORE","text":"","code":"get_JASPARCORE(verbose = FALSE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_JASPARCORE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download JASPAR CORE database — get_JASPARCORE","text":"verbose logical indicating whether print verbose messages running function. (default = FALSE)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_JASPARCORE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download JASPAR CORE database — get_JASPARCORE","text":"character string specifying path downloaded file (meme format).","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_JASPARCORE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download JASPAR CORE database — get_JASPARCORE","text":"","code":"get_JASPARCORE() #>                                                                                           BFC1  #> \"/github/home/.cache/R/BiocFileCache/2037631a6286_JASPAR2024_CORE_non-redundant_pfms_meme.txt\""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_bpparam.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameters for BiocParallel — get_bpparam","title":"Get parameters for BiocParallel — get_bpparam","text":"Get appropriate parameters BiocParallel based number workers specified. less 10 workers, function returns MulticoreParam object. 10 cores, function returns SnowParam object. Since Windows supports neither, function returns SerialParam object. result, Windows users benefit parallel processing.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_bpparam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameters for BiocParallel — get_bpparam","text":"","code":"get_bpparam(   workers,   progressbar = workers > 1,   force_snowparam = FALSE,   verbose = FALSE )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_bpparam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameters for BiocParallel — get_bpparam","text":"workers number workers use parallel processing. progressbar logical(1) Enable progress bar (based plyr:::progress_text). force_snowparam logical indicating whether force use SnowParam object. verbose logical indicating whether print verbose messages running function. (default = FALSE)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_bpparam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parameters for BiocParallel — get_bpparam","text":"BPPARAM object.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_df_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dataframe with motif-summit distances — get_df_distances","title":"Get dataframe with motif-summit distances — get_df_distances","text":"Wrapper `MotifPeeker::summit_to_motif` get motif-summit distances peaks motifs, generating data.frame suitable plots.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_df_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dataframe with motif-summit distances — get_df_distances","text":"","code":"get_df_distances(   result,   user_motifs,   genome_build,   out_dir = tempdir(),   workers = 1,   meme_path = NULL,   verbose = FALSE )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_df_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dataframe with motif-summit distances — get_df_distances","text":"result list following elements: peaks list peak files generated using read_peak_file. alignments list alignment files. exp_type character vector experiment types. exp_labels character vector experiment labels. read_count numeric vector read counts. peak_count numeric vector peak counts. user_motifs list following elements: motifs list motif files. motif_labels character vector motif labels. genome_build character string abbreviated genome build name, BSGenome object. moment, hg38 hg19 supported abbreviated input. out_dir character vector output directory. workers integer specifying number threads use parallel processing. (default = 1)IMPORTANT: worker, please ensure minimum 6GB memory (RAM) available denovo_motif_discovery memory-intensive. meme_path path meme/bin/ (optional). Defaut: NULL, searches \"MEME_PATH\" environment variable \"meme_path\" option path \"meme/bin/\". verbose logical indicating whether print verbose messages running function. (default = FALSE)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_df_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dataframe with motif-summit distances — get_df_distances","text":"data.frame following columns: exp_label Experiment labels. exp_type Experiment types. motif_indice Motif indices. distance Distances peak summit motif.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_df_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get dataframe with motif-summit distances — get_df_distances","text":"","code":"data(\"CTCF_ChIP_peaks\", package = \"MotifPeeker\") data(\"motif_MA1102.3\", package = \"MotifPeeker\") data(\"motif_MA1930.2\", package = \"MotifPeeker\") input <- list(     peaks = CTCF_ChIP_peaks,     exp_type = \"ChIP\",     exp_labels = \"CTCF\",     read_count = 150,     peak_count = 100 ) motifs <- list(     motifs = list(motif_MA1930.2, motif_MA1102.3),     motif_labels = list(\"MA1930.2\", \"MA1102.3\") )  if (requireNamespace(\"BSgenome.Hsapiens.UCSC.hg38\")) {     genome_build <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38     distances_df <- get_df_distances(input, motifs, genome_build,                           workers = 1)     print(distances_df) } #>     exp_label exp_type motif_indice distance #> 1        CTCF     ChIP            1     24.0 #> 2        CTCF     ChIP            1    -26.0 #> 3        CTCF     ChIP            1    -20.0 #> 4        CTCF     ChIP            1     21.0 #> 5        CTCF     ChIP            1     -3.0 #> 6        CTCF     ChIP            1    -18.0 #> 7        CTCF     ChIP            1     14.0 #> 8        CTCF     ChIP            1      2.0 #> 9        CTCF     ChIP            1    -20.0 #> 10       CTCF     ChIP            1     17.0 #> 11       CTCF     ChIP            1    -27.0 #> 12       CTCF     ChIP            1     -4.0 #> 13       CTCF     ChIP            1      5.0 #> 14       CTCF     ChIP            1    -17.0 #> 15       CTCF     ChIP            1      8.0 #> 16       CTCF     ChIP            1    -13.0 #> 17       CTCF     ChIP            1     -5.0 #> 18       CTCF     ChIP            1     14.0 #> 19       CTCF     ChIP            1     25.0 #> 20       CTCF     ChIP            1      0.0 #> 21       CTCF     ChIP            1     14.0 #> 22       CTCF     ChIP            1    -29.0 #> 23       CTCF     ChIP            1   -245.0 #> 24       CTCF     ChIP            1      3.0 #> 25       CTCF     ChIP            1     16.0 #> 26       CTCF     ChIP            1    -32.0 #> 27       CTCF     ChIP            1     28.0 #> 28       CTCF     ChIP            1    -22.0 #> 29       CTCF     ChIP            1     -5.0 #> 30       CTCF     ChIP            1     -7.0 #> 31       CTCF     ChIP            1      2.0 #> 32       CTCF     ChIP            1     -9.0 #> 33       CTCF     ChIP            1   -116.0 #> 34       CTCF     ChIP            1     11.0 #> 35       CTCF     ChIP            1      1.0 #> 36       CTCF     ChIP            1    -82.0 #> 37       CTCF     ChIP            1    -22.0 #> 38       CTCF     ChIP            1     -3.0 #> 39       CTCF     ChIP            1     45.0 #> 40       CTCF     ChIP            1      5.0 #> 41       CTCF     ChIP            1     -3.0 #> 42       CTCF     ChIP            1      9.0 #> 43       CTCF     ChIP            1     -7.0 #> 44       CTCF     ChIP            1   -168.0 #> 45       CTCF     ChIP            1    119.0 #> 46       CTCF     ChIP            1     74.0 #> 47       CTCF     ChIP            1     -1.0 #> 48       CTCF     ChIP            1      2.0 #> 49       CTCF     ChIP            1    -26.0 #> 50       CTCF     ChIP            1     15.0 #> 51       CTCF     ChIP            1      1.0 #> 52       CTCF     ChIP            1     -9.0 #> 53       CTCF     ChIP            1    -70.0 #> 54       CTCF     ChIP            1      1.0 #> 55       CTCF     ChIP            1     22.0 #> 56       CTCF     ChIP            1    -95.0 #> 57       CTCF     ChIP            1    -13.0 #> 58       CTCF     ChIP            1     16.0 #> 59       CTCF     ChIP            1     30.0 #> 60       CTCF     ChIP            1      2.0 #> 61       CTCF     ChIP            1      2.0 #> 62       CTCF     ChIP            1    -31.0 #> 63       CTCF     ChIP            1     -9.0 #> 64       CTCF     ChIP            1    -53.0 #> 65       CTCF     ChIP            1    -64.0 #> 66       CTCF     ChIP            1   -115.0 #> 67       CTCF     ChIP            1     13.0 #> 68       CTCF     ChIP            1     -3.0 #> 69       CTCF     ChIP            1     -5.0 #> 70       CTCF     ChIP            1    -10.0 #> 71       CTCF     ChIP            1     34.0 #> 72       CTCF     ChIP            1    -21.0 #> 73       CTCF     ChIP            1     49.0 #> 74       CTCF     ChIP            1      6.0 #> 75       CTCF     ChIP            1    -24.0 #> 76       CTCF     ChIP            1      8.0 #> 77       CTCF     ChIP            1     -8.0 #> 78       CTCF     ChIP            1     -8.0 #> 79       CTCF     ChIP            1    -35.0 #> 80       CTCF     ChIP            1     12.0 #> 81       CTCF     ChIP            1      7.0 #> 82       CTCF     ChIP            1     12.0 #> 83       CTCF     ChIP            1    -21.0 #> 84       CTCF     ChIP            1    -24.0 #> 85       CTCF     ChIP            1     35.0 #> 86       CTCF     ChIP            1    -34.0 #> 87       CTCF     ChIP            1    -42.0 #> 88       CTCF     ChIP            1      4.0 #> 89       CTCF     ChIP            1    -46.0 #> 90       CTCF     ChIP            1    -24.0 #> 91       CTCF     ChIP            1      5.0 #> 92       CTCF     ChIP            1     -9.0 #> 93       CTCF     ChIP            1      0.0 #> 94       CTCF     ChIP            1     -9.0 #> 95       CTCF     ChIP            1    -11.0 #> 96       CTCF     ChIP            1      3.0 #> 97       CTCF     ChIP            1     -3.0 #> 98       CTCF     ChIP            1     -9.0 #> 99       CTCF     ChIP            1    -37.0 #> 100      CTCF     ChIP            1     11.0 #> 101      CTCF     ChIP            1    -15.0 #> 102      CTCF     ChIP            1      1.0 #> 103      CTCF     ChIP            1    -96.0 #> 104      CTCF     ChIP            1     -7.0 #> 105      CTCF     ChIP            1     -9.0 #> 106      CTCF     ChIP            1      1.0 #> 107      CTCF     ChIP            1     12.0 #> 108      CTCF     ChIP            1      7.0 #> 109      CTCF     ChIP            1    -19.0 #> 110      CTCF     ChIP            1    -22.0 #> 111      CTCF     ChIP            1     25.0 #> 112      CTCF     ChIP            1    -29.0 #> 113      CTCF     ChIP            1    -52.0 #> 114      CTCF     ChIP            2      6.5 #> 115      CTCF     ChIP            2    -14.5 #> 116      CTCF     ChIP            2     63.5 #> 117      CTCF     ChIP            2     17.5 #> 118      CTCF     ChIP            2   -122.5 #> 119      CTCF     ChIP            2   -126.5 #> 120      CTCF     ChIP            2     21.5 #> 121      CTCF     ChIP            2     -6.5 #> 122      CTCF     ChIP            2   -122.5 #> 123      CTCF     ChIP            2    -16.5 #> 124      CTCF     ChIP            2    -10.5 #> 125      CTCF     ChIP            2     -5.5 #> 126      CTCF     ChIP            2    -19.5 #> 127      CTCF     ChIP            2    -59.5 #> 128      CTCF     ChIP            2     -9.5 #> 129      CTCF     ChIP            2    -20.5 #> 130      CTCF     ChIP            2     11.5 #> 131      CTCF     ChIP            2    -20.5 #> 132      CTCF     ChIP            2      8.5 #> 133      CTCF     ChIP            2    -10.5 #> 134      CTCF     ChIP            2      5.5 #> 135      CTCF     ChIP            2    -79.5 #> 136      CTCF     ChIP            2      5.5 #> 137      CTCF     ChIP            2    -13.5 #> 138      CTCF     ChIP            2     90.5 #> 139      CTCF     ChIP            2      0.5 #> 140      CTCF     ChIP            2     -5.5 #> 141      CTCF     ChIP            2     33.5 #> 142      CTCF     ChIP            2     -2.5 #> 143      CTCF     ChIP            2     94.5 #> 144      CTCF     ChIP            2     87.5 #> 145      CTCF     ChIP            2    -24.5 #> 146      CTCF     ChIP            2     72.5 #> 147      CTCF     ChIP            2    -23.5 #> 148      CTCF     ChIP            2      2.5 #> 149      CTCF     ChIP            2      1.5 #> 150      CTCF     ChIP            2   -120.5 #> 151      CTCF     ChIP            2    -10.5 #> 152      CTCF     ChIP            2    -93.5 #> 153      CTCF     ChIP            2    -11.5 #> 154      CTCF     ChIP            2     -4.5 #> 155      CTCF     ChIP            2     88.5 #> 156      CTCF     ChIP            2     -6.5 #> 157      CTCF     ChIP            2     11.5 #> 158      CTCF     ChIP            2      4.5 #> 159      CTCF     ChIP            2    104.5 #> 160      CTCF     ChIP            2    128.5"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_df_enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dataframe with motif enrichment values — get_df_enrichment","title":"Get dataframe with motif enrichment values — get_df_enrichment","text":"Wrapper `MotifPeeker::motif_enrichment` get motif enrichment counts percentages peaks motifs, generating data.frame suitable plots. data.frame contains values segregated peaks.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_df_enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dataframe with motif enrichment values — get_df_enrichment","text":"","code":"get_df_enrichment(   result,   segregated_peaks,   user_motifs,   genome_build,   reference_index = 1,   out_dir = tempdir(),   workers = 1,   meme_path = NULL,   verbose = FALSE )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_df_enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dataframe with motif enrichment values — get_df_enrichment","text":"result list following elements: peaks list peak files generated using read_peak_file. alignments list alignment files. exp_type character vector experiment types. exp_labels character vector experiment labels. read_count numeric vector read counts. peak_count numeric vector peak counts. segregated_peaks list object generated using segregate_seqs. user_motifs list following elements: motifs list motif files. motif_labels character vector motif labels. genome_build character string abbreviated genome build name, BSGenome object. moment, hg38 hg19 supported abbreviated input. reference_index integer specifying index peak file use reference dataset comparison. Indexing starts 1. (default = 1) out_dir character vector output directory. workers integer specifying number threads use parallel processing. (default = 1)IMPORTANT: worker, please ensure minimum 6GB memory (RAM) available denovo_motif_discovery memory-intensive. meme_path path meme/bin/ (optional). Defaut: NULL, searches \"MEME_PATH\" environment variable \"meme_path\" option path \"meme/bin/\". verbose logical indicating whether print verbose messages running function. (default = FALSE)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_df_enrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dataframe with motif enrichment values — get_df_enrichment","text":"data.frame following columns: exp_label Experiment labels. exp_type Experiment types. motif_indice Motif indices. group1 Segregated group- \"\", \"Common\" \"Unique\". group2 \"reference\" \"comparison\" group. count_enriched Number peaks motif. count_nonenriched Number peaks without motif. perc_enriched Percentage peaks motif. perc_nonenriched Percentage peaks without motif.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_df_enrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get dataframe with motif enrichment values — get_df_enrichment","text":"","code":"data(\"CTCF_ChIP_peaks\", package = \"MotifPeeker\") data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\") data(\"motif_MA1102.3\", package = \"MotifPeeker\") data(\"motif_MA1930.2\", package = \"MotifPeeker\") input <- list(     peaks = list(CTCF_ChIP_peaks, CTCF_TIP_peaks),     exp_type = c(\"ChIP\", \"TIP\"),     exp_labels = c(\"CTCF_ChIP\", \"CTCF_TIP\"),     read_count = c(150, 200),     peak_count = c(100, 120) ) segregated_input <- segregate_seqs(input$peaks[[1]], input$peaks[[2]]) motifs <- list(     motifs = list(motif_MA1930.2, motif_MA1102.3),     motif_labels = list(\"MA1930.2\", \"MA1102.3\") ) reference_index <- 1  # \\donttest{     if (requireNamespace(\"BSgenome.Hsapiens.UCSC.hg38\")) {         genome_build <-             BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38              enrichment_df <- get_df_enrichment(             input, segregated_input, motifs, genome_build,             reference_index = 1, workers = 1         )     } # }"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_download_buttons.html","id":null,"dir":"Reference","previous_headings":"","what":"Get download buttons for peak file, STREME and TOMOTM output — get_download_buttons","title":"Get download buttons for peak file, STREME and TOMOTM output — get_download_buttons","text":"Get download buttons peak file, STREME TOMOTM output","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_download_buttons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get download buttons for peak file, STREME and TOMOTM output — get_download_buttons","text":"","code":"get_download_buttons(   comparison_i,   start_i,   segregated_peaks,   out_dir,   add_buttons = TRUE,   verbose = FALSE )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_download_buttons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get download buttons for peak file, STREME and TOMOTM output — get_download_buttons","text":"comparison_i Index comparison pair group. start_i Index first comparison pair. segregated_peaks list peak files generated segregate_seqs. out_dir character vector directory STREME TOMTOM output. add_buttons logical indicating whether prepare download buttons. verbose logical indicating whether print messages.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/get_download_buttons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get download buttons for peak file, STREME and TOMOTM output — get_download_buttons","text":"list download buttons peak file, STREME TOMTOM output.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/link_JASPAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Get JASPAR link for motifs — link_JASPAR","title":"Get JASPAR link for motifs — link_JASPAR","text":"Get JASPAR link motifs","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/link_JASPAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get JASPAR link for motifs — link_JASPAR","text":"","code":"link_JASPAR(motif_id, download = FALSE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/link_JASPAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get JASPAR link for motifs — link_JASPAR","text":"motif_id character string specifying JASPAR motif ID. download logical specifying whether return download link HTML embeddable matrix profile link. (default = FALSE)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/link_JASPAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get JASPAR link for motifs — link_JASPAR","text":"character string containing JASPAR motif link. motif_id valid JASPAR motif ID, returned .","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/markov_background_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a 0-order Markov background model — markov_background_model","title":"Generate a 0-order Markov background model — markov_background_model","text":"markov_background_model() generates 0-order background model use FIMO AME. function uses letter frequencies input sequences generate background model.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/markov_background_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a 0-order Markov background model — markov_background_model","text":"","code":"markov_background_model(sequences, out_dir, verbose = FALSE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/markov_background_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a 0-order Markov background model — markov_background_model","text":"sequences DNAStringSet object. out_dir Location save 0-order background file. verbose logical indicating whether print verbose messages running function. (default = FALSE)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/markov_background_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a 0-order Markov background model — markov_background_model","text":"path 0-order background file.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/messager.html","id":null,"dir":"Reference","previous_headings":"","what":"Print messages — messager","title":"Print messages — messager","text":"Conditionally print messages.  Allows developers easily control verbosity functions,  meet Bioconductor requirements dictate message  must first stored variable passing message.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/messager.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print messages — messager","text":"","code":"messager(..., v = Sys.getenv(\"VERBOSE\") != \"FALSE\", parallel = TRUE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/messager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print messages — messager","text":"v Whether print messages . parallel Whether enable message print wrapped parallelised functions.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/messager.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print messages — messager","text":"Null","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_MA1102.3.html","id":null,"dir":"Reference","previous_headings":"","what":"Example CTCFL JASPAR motif file — motif_MA1102.3","title":"Example CTCFL JASPAR motif file — motif_MA1102.3","text":"motif file contains JASPAR motif CTCFL (MA1102.3) Homo Sapiens. one two motif files used demonstrate MotifPeeker's known-motif analysis functionality.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_MA1102.3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example CTCFL JASPAR motif file — motif_MA1102.3","text":"","code":"data(\"motif_MA1102.3\")"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_MA1102.3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example CTCFL JASPAR motif file — motif_MA1102.3","text":"object class universalmotif length 1.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_MA1102.3.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example CTCFL JASPAR motif file — motif_MA1102.3","text":"JASPAR Matrix ID: MA1102.3","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_MA1930.2.html","id":null,"dir":"Reference","previous_headings":"","what":"Example CTCF JASPAR motif file — motif_MA1930.2","title":"Example CTCF JASPAR motif file — motif_MA1930.2","text":"motif file contains JASPAR motif CTCF (MA1930.2) Homo Sapiens. one two motif files used demonstrate MotifPeeker's known-motif analysis functionality.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_MA1930.2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example CTCF JASPAR motif file — motif_MA1930.2","text":"","code":"data(\"motif_MA1930.2\")"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_MA1930.2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example CTCF JASPAR motif file — motif_MA1930.2","text":"object class universalmotif length 1.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_MA1930.2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example CTCF JASPAR motif file — motif_MA1930.2","text":"JASPAR Matrix ID: MA1930.2","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate motif enrichment in a set of sequences — motif_enrichment","title":"Calculate motif enrichment in a set of sequences — motif_enrichment","text":"motif_enrichment() calculates motif enrichment relative set background sequences using Analysis Motif Enrichment (AME) memes.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate motif enrichment in a set of sequences — motif_enrichment","text":"","code":"motif_enrichment(   peak_input,   motif,   genome_build,   out_dir = tempdir(),   verbose = FALSE,   meme_path = NULL,   ... )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate motif enrichment in a set of sequences — motif_enrichment","text":"peak_input Either path narrowPeak file GRanges peak object generated read_peak_file(). motif object class universalmotif. genome_build genome build peak sequences derived . out_dir Location save 0-order background file along AME output files. verbose logical indicating whether print verbose messages running function. (default = FALSE) meme_path path \"meme/bin/\" (default: NULL). use default search behavior described check_meme_install() unset. ... Arguments passed memes::runAme method default: fisher (allowed values: fisher, ranksum, pearson, spearman, 3dmhg, 4dmhg) sequences logical(1) add results sequences.tsv sequences list column returned data.frame. Valid method = \"fisher\". See AME outputs webpage information (Default: FALSE). silent whether suppress stdout (default: TRUE), useful debugging.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_enrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate motif enrichment in a set of sequences — motif_enrichment","text":"list containing FIMO results data frame numeric referring proportion peaks motif.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_enrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate motif enrichment in a set of sequences — motif_enrichment","text":"","code":"data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\") data(\"motif_MA1102.3\", package = \"MotifPeeker\")  # \\donttest{     res <- motif_enrichment(         peak_input = CTCF_TIP_peaks,         motif = motif_MA1102.3,         genome_build =             BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38     )     print(res) #> $tp #> [1] 73.00 40.11 #>  #> $fp #> [1] 286.00  26.19 #>  #> $positive_peaks #> GRanges object with 73 ranges and 7 metadata columns: #>                   seqnames            ranges strand |            name     score #>                      <Rle>         <IRanges>  <Rle> |     <character> <numeric> #>    TIPseq_peak_63    chr10 69801154-69801320      * |  TIPseq_peak_63       109 #>    TIPseq_peak_90    chr10 70559156-70559588      * |  TIPseq_peak_90       122 #>   TIPseq_peak_157    chr10 73529363-73529638      * | TIPseq_peak_157       106 #>   TIPseq_peak_167    chr10 73957451-73957745      * | TIPseq_peak_167        73 #>    TIPseq_peak_39    chr10 68988538-68988838      * |  TIPseq_peak_39       111 #>               ...      ...               ...    ... .             ...       ... #>   TIPseq_peak_105    chr10 71270297-71270663      * | TIPseq_peak_105       138 #>    TIPseq_peak_51    chr10 69507836-69508269      * |  TIPseq_peak_51       206 #>   TIPseq_peak_169    chr10 73966072-73966376      * | TIPseq_peak_169        70 #>    TIPseq_peak_44    chr10 69232402-69232647      * |  TIPseq_peak_44        45 #>    TIPseq_peak_46    chr10 69392521-69392898      * |  TIPseq_peak_46       132 #>                   signalValue    pValue    qValue      peak    summit #>                     <numeric> <numeric> <numeric> <integer> <integer> #>    TIPseq_peak_63     7.19424   15.0082  10.96220        54  69801208 #>    TIPseq_peak_90     8.60956   16.5013  12.29430       312  70559468 #>   TIPseq_peak_157     8.79456   14.6750  10.66540       105  73529468 #>   TIPseq_peak_167     6.58212   11.0334   7.35935       125  73957576 #>    TIPseq_peak_39     9.10857   15.2180  11.14710       168  68988706 #>               ...         ...       ...       ...       ...       ... #>   TIPseq_peak_105     9.39681  18.29610  13.87650       113  71270410 #>    TIPseq_peak_51    11.20730  25.79100  20.65960       119  69507955 #>   TIPseq_peak_169     6.33687  10.63470   7.00211       168  73966240 #>    TIPseq_peak_44     5.62082   7.95049   4.55375       110  69232512 #>    TIPseq_peak_46     9.25369  17.56690  13.23280       225  69392746 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  # }"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare motifs from segregated sequences — motif_similarity","title":"Compare motifs from segregated sequences — motif_similarity","text":"Compute motif similarity scores motifs discovered segregated sequences. Wrapper around compare_motifs compare motifs different groups sequences. see possible similarity measures available, refer details.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare motifs from segregated sequences — motif_similarity","text":"","code":"motif_similarity(   streme_out,   method = \"PCC\",   normalise.scores = TRUE,   workers = 1,   ... )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare motifs from segregated sequences — motif_similarity","text":"streme_out Output denovo_motifs. method character(1) One PCC, EUCL, SW, KL, ALLR, BHAT, HELL, SEUCL, MAN, ALLR_LL, WEUCL, WPCC. See details. normalise.scores logical(1) Favour alignments leave fewer unaligned positions, well alignments motifs similar length. Similarity scores multiplied ratio aligned positions total number positions larger motif, inverse distance scores. workers number workers use parallel processing. ... Arguments passed universalmotif::compare_motifs motifs See convert_motifs() acceptable motif formats. compare.numeric missing, compares motifs motifs. Otherwise compares motifs specified motif(s). db.scores data.frame DataFrame. See details. use.freq numeric(1). comparing multifreq slot. use.type character(1) One 'PPM' 'ICM'. latter allows taking account background frequencies relative_entropy = TRUE. Note 'ICM' allowed method = c(\"ALLR\", \"ALLR_LL\"). tryRC logical(1) Try reverse complement motifs well, report best score. min.overlap numeric(1) Minimum overlap required aligning motifs. Setting number higher width motifs allow overhangs. Can also number 0 1, representing minimum fraction motifs must overlap. min.mean.ic numeric(1) Minimum mean information content two motifs alignment scored. helps prevent scoring alignments low information content regions two motifs. Note can result comparisons failing alignment passes mean IC threshold. Use average_ic() filter low IC motifs get around want avoid getting NAs output. min.position.ic numeric(1) Minimum information content required individual alignment positions counted final alignment score. recommended use together normalise.scores = TRUE, help punish scores resulting fraction alignment. relative_entropy logical(1) Change ICM calculation affecting min.position.ic min.mean.ic. See convert_type(). max.p numeric(1) Maximum P-value allowed reporting matches. used compare.set. max.e numeric(1) Maximum E-value allowed reporting matches. used compare.set. E-value P-value multiplied number input motifs times two. nthreads numeric(1) Run compare_motifs() parallel nthreads threads. nthreads = 0 uses available threads. score.strat character(1) handle column scores calculated motif alignments. \"sum\": add scores. \".mean\": take arithmetic mean. \"g.mean\": take geometric mean. \"median\": take median. \"wa.mean\", \"wg.mean\": weighted arithmetic/geometric mean. \"fzt\": Fisher Z-transform. Weights total information content shared aligned columns. output.report character(1) Provide filename compare_motifs() write html ouput report . top matches shown alongside figures match alignments. requires knitr rmarkdown packages. (Note: still development.) output.report.max.print numeric(1) Maximum number top matches print.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare motifs from segregated sequences — motif_similarity","text":"list matrices containing similarity scores motifs different groups sequences. order comparison follows, first element representing rows second element representing columns matrix: 1. Common motifs comparison: Common seqs reference     (1) <-> comparison (2) 2. Unique motifs comparison: Unique seqs reference     (1) <-> comparison (2) 3. Cross motifs comparison 1: Unique seqs reference     (1) <-> comparison (1) 4. Cross motifs comparison 2: Unique seqs comparison     (2) <-> reference (1) list repeated set comparison groups input.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_similarity.html","id":"available-metrics","dir":"Reference","previous_headings":"","what":"Available metrics","title":"Compare motifs from segregated sequences — motif_similarity","text":"following metrics available: Euclidean distance (EUCL) (Choi et al. 2004) Weighted Euclidean distance (WEUCL) Kullback-Leibler divergence (KL) (Kullback Leibler 1951; Roepcke et al. 2005) Hellinger distance (HELL) (Hellinger 1909) Squared Euclidean distance (SEUCL) Manhattan distance (MAN) Pearson correlation coefficient (PCC) Weighted Pearson correlation coefficient (WPCC) Sandelin-Wasserman similarity (SW), sum squared distances (Sandelin Wasserman 2004) Average log-likelihood ratio (ALLR) (Wang Stormo 2003) Lower limit ALLR (ALLR_LL) (Mahony et al. 2007) Bhattacharyya coefficient (BHAT) (Bhattacharyya 1943) Comparisons calculated two motifs time. possible alignments scored, best score reported. alignment scores calculated individually columns. scores combined generate final alignment scores depends score.strat. See \"Motif comparisons P-values\" vignette description various metrics. Note PCC, WPCC, SW, ALLR, ALLR_LL BHAT similarities; higher values mean similar motifs. remaining metrics, values closer zero represent similar motifs. Small pseudocounts automatically added one following methods used: KL, ALLR, ALLR_LL, . avoid zeros calculations.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_similarity.html","id":"calculating-p-values","dir":"Reference","previous_headings":"","what":"Calculating P-values","title":"Compare motifs from segregated sequences — motif_similarity","text":"note regarding p-values: P-values pre-computed using make_DBscores() function. given, uses set internal precomputed P-values JASPAR2018 CORE motifs. precalculated scores dependent length motifs compared. takes account comparing small motifs larger motifs leads higher scores, since probability finding higher scoring alignment higher. default P-values precalculated regular DNA motifs. little use motifs different number alphabet letters (even multifreq slot).","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/motif_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare motifs from segregated sequences — motif_similarity","text":"","code":"data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\") data(\"CTCF_ChIP_peaks\", package = \"MotifPeeker\")  # \\donttest{     if (requireNamespace(\"BSgenome.Hsapiens.UCSC.hg38\")) {         genome_build <-             BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38         segregated_peaks <- segregate_seqs(CTCF_TIP_peaks, CTCF_ChIP_peaks)         denovo_motifs <- denovo_motifs(unlist(segregated_peaks),                             trim_seq_width = 100,                             genome_build = genome_build,                             denovo_motifs = 2,                             filter_n = 6,                             out_dir = tempdir(),                             workers = 1)         similarity_matrices <- motif_similarity(denovo_motifs)         print(similarity_matrices)     } #> Warning: p-values will be inaccurate if primary and control #> Warning: p-values will be inaccurate if primary and control #> Warning: p-values will be inaccurate if primary and control #> Warning: p-values will be inaccurate if primary and control #> Warning: p-values will be inaccurate if primary and control #> Warning: p-values will be inaccurate if primary and control #> [[1]] #>                      m02_CCAAATGTC #> m01_CTTTCACC             0.2074106 #> m02_CACCAGRKGGCRCCAY     0.3315691 #>  #> [[2]] #>                      m01_AGYGCCYCCYBSWGGHVVHHS m02_CCAGCAGAG #> m01_WKCCCRGMMSWKHRRG                 0.2005610     0.3616919 #> m02_CAGTGASTCABRAG                   0.1969998     0.2127419 #>  #> [[3]] #>                      m02_CCAAATGTC #> m01_WKCCCRGMMSWKHRRG     0.2921158 #> m02_CAGTGASTCABRAG       0.2266144 #>  #> [[4]] #>                           m01_CTTTCACC m02_CACCAGRKGGCRCCAY #> m01_AGYGCCYCCYBSWGGHVVHHS    0.2081969            0.5523781 #> m02_CCAGCAGAG                0.2273303            0.3806207 #>  # }"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/normalise_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply normalizePath to a list of paths — normalise_paths","title":"Apply normalizePath to a list of paths — normalise_paths","text":"Apply normalizePath list paths","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/normalise_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply normalizePath to a list of paths — normalise_paths","text":"","code":"normalise_paths(path_list)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/normalise_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply normalizePath to a list of paths — normalise_paths","text":"path_list list paths.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/normalise_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply normalizePath to a list of paths — normalise_paths","text":"list normalised paths input contents character.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pipe operator — %>%","text":"Generated use_pipe. Modified import dplyr instead magrittr.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe operator — %>%","text":"","code":"seq_len(10) %>% sum #> [1] 55"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_enrichment_individual.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot motif-enrichment for individual experiments — plot_enrichment_individual","title":"Plot motif-enrichment for individual experiments — plot_enrichment_individual","text":"Visualises result get_df_enrichment single motif producing plotly bar plot motif enrichment comparisons one comparison dataset pair.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_enrichment_individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot motif-enrichment for individual experiments — plot_enrichment_individual","text":"","code":"plot_enrichment_individual(   result,   enrichment_df,   comparison_i,   motif_i,   label_colours,   reference_index = 1,   html_tags = TRUE )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_enrichment_individual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot motif-enrichment for individual experiments — plot_enrichment_individual","text":"result list following elements: peaks list peak files generated using read_peak_file. alignments list alignment files. exp_type character vector experiment types. exp_labels character vector experiment labels. read_count numeric vector read counts. peak_count numeric vector peak counts. enrichment_df data frame containing motif enrichment results, produced using get_df_enrichment. comparison_i index comparison dataset plot. motif_i index motif plot. label_colours vector colours (valid names hex codes) use \"\" \"Yes\" bar segments. reference_index integer specifying index peak file use reference dataset comparison. Indexing starts 1. (default = 1) html_tags Logical. TRUE, returns plot tagList object.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_enrichment_individual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot motif-enrichment for individual experiments — plot_enrichment_individual","text":"plotly object peak motif enrichment data. html_tags TRUE, function returns tagList object instead.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_enrichment_individual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot motif-enrichment for individual experiments — plot_enrichment_individual","text":"","code":"data(\"CTCF_ChIP_peaks\", package = \"MotifPeeker\") data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\") data(\"motif_MA1102.3\", package = \"MotifPeeker\") data(\"motif_MA1930.2\", package = \"MotifPeeker\") input <- list(     peaks = list(CTCF_ChIP_peaks, CTCF_TIP_peaks),     exp_type = c(\"ChIP\", \"TIP\"),     exp_labels = c(\"CTCF_ChIP\", \"CTCF_TIP\"),     read_count = c(150, 200),     peak_count = c(100, 120) ) segregated_input <- segregate_seqs(input$peaks[[1]], input$peaks[[2]]) motifs <- list(     motifs = list(motif_MA1930.2, motif_MA1102.3),     motif_labels = list(\"MA1930.2\", \"MA1102.3\") )      # \\donttest{     if (requireNamespace(\"BSgenome.Hsapiens.UCSC.hg38\")) {         genome_build <-             BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38         enrichment_df <- get_df_enrichment(             input, segregated_input, motifs, genome_build,             reference_index = 1, workers = 1         )         label_colours <- c(\"red\", \"cyan\")              plt <- MotifPeeker:::plot_enrichment_individual(             input, enrichment_df, comparison_i = 2, motif_i = 1,             label_colours = label_colours, reference_index = 1,             html_tags = FALSE         )         print(plt)     } #> <div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-8a1f8f4a61c98a07d1d5\" style=\"width:100%;height:400px;\"><\/div> #> <script type=\"application/json\" data-for=\"htmlwidget-8a1f8f4a61c98a07d1d5\">{\"x\":{\"data\":[{\"orientation\":\"v\",\"width\":[0.89999999999999991,0.90000000000000013,0.90000000000000036,0.90000000000000036,0.90000000000000036,0.90000000000000036],\"base\":[66,50,48,49,15,3],\"x\":[1,2,3,4,5,6],\"y\":[34,70,79,78,67,54],\"text\":[\"<b>Peak Count:<\\/b> 34 (68.42%)\",\"<b>Peak Count:<\\/b> 70 (72.53%)\",\"<b>Peak Count:<\\/b> 79 (62.2%)\",\"<b>Peak Count:<\\/b> 78 (61.42%)\",\"<b>Peak Count:<\\/b> 67 (81.71%)\",\"<b>Peak Count:<\\/b> 54 (94.74%)\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(255,0,0,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"No\",\"legendgroup\":\"No\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[0.89999999999999991,0.90000000000000013,0.90000000000000036,0.90000000000000036,0.90000000000000036,0.90000000000000036],\"base\":[0,0,0,0,0,0],\"x\":[1,2,3,4,5,6],\"y\":[66,50,48,49,15,3],\"text\":[\"<b>Peak Count:<\\/b> 66 (31.58%)\",\"<b>Peak Count:<\\/b> 50 (27.47%)\",\"<b>Peak Count:<\\/b> 48 (37.8%)\",\"<b>Peak Count:<\\/b> 49 (38.58%)\",\"<b>Peak Count:<\\/b> 15 (18.29%)\",\"<b>Peak Count:<\\/b> 3 (5.26%)\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,255,255,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Yes\",\"legendgroup\":\"Yes\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":23.305936073059364,\"r\":7.3059360730593621,\"b\":59.898613393879913,\"l\":43.105022831050235},\"plot_bgcolor\":\"rgba(235,235,235,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,6.5999999999999996],\"tickmode\":\"array\",\"ticktext\":[\"All<br /> CTCF_ChIP <br />Peaks\",\"All<br /> CTCF_TIP <br />Peaks\",\"Common<br /> CTCF_ChIP <br />Peaks\",\"Common<br /> CTCF_TIP <br />Peaks\",\"Unique<br /> CTCF_ChIP <br />Peaks\",\"Unique<br /> CTCF_TIP <br />Peaks\"],\"tickvals\":[1,2,3,3.9999999999999996,5,6],\"categoryorder\":\"array\",\"categoryarray\":[\"All<br /> CTCF_ChIP <br />Peaks\",\"All<br /> CTCF_TIP <br />Peaks\",\"Common<br /> CTCF_ChIP <br />Peaks\",\"Common<br /> CTCF_TIP <br />Peaks\",\"Unique<br /> CTCF_ChIP <br />Peaks\",\"Unique<br /> CTCF_TIP <br />Peaks\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-45,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Peak Groups\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-6.3500000000000005,133.34999999999999],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"50\",\"100\"],\"tickvals\":[0,50,99.999999999999986],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"50\",\"100\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Peak Count\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":true,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498},\"title\":{\"text\":\"Motif Present\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"traceorder\":\"reversed\"},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"559d2a296e4a\":{\"x\":{},\"y\":{},\"fill\":{},\"text\":{},\"type\":\"bar\"}},\"cur_data\":\"559d2a296e4a\",\"visdat\":{\"559d2a296e4a\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}<\/script> # }"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_enrichment_overall.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot motif-enrichment for all experiments — plot_enrichment_overall","title":"Plot motif-enrichment for all experiments — plot_enrichment_overall","text":"Visualises result get_df_enrichment single motif producing plotly bar plot motif enrichment comparisons comparison dataset pair.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_enrichment_overall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot motif-enrichment for all experiments — plot_enrichment_overall","text":"","code":"plot_enrichment_overall(   enrichment_df,   motif_i,   label_colours,   reference_label,   html_tags = TRUE )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_enrichment_overall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot motif-enrichment for all experiments — plot_enrichment_overall","text":"enrichment_df data frame containing motif enrichment results, produced using get_df_enrichment. motif_i index motif plot. label_colours vector colours (valid names hex codes) use \"\" \"Yes\" bar segments. reference_label label reference experiment. html_tags Logical. TRUE, returns plot tagList object.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_enrichment_overall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot motif-enrichment for all experiments — plot_enrichment_overall","text":"list plotly objects peak motif enrichment data. html_tags TRUE, function returns list tagList objects instead. two plots list named follows: $count_plt y-axis represents number peaks. $perc_plt y-axis represents percentage peaks.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_enrichment_overall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot motif-enrichment for all experiments — plot_enrichment_overall","text":"","code":"data(\"CTCF_ChIP_peaks\", package = \"MotifPeeker\") data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\") data(\"motif_MA1102.3\", package = \"MotifPeeker\") data(\"motif_MA1930.2\", package = \"MotifPeeker\") input <- list(     peaks = list(CTCF_ChIP_peaks, CTCF_TIP_peaks),     exp_type = c(\"ChIP\", \"TIP\"),     exp_labels = c(\"CTCF_ChIP\", \"CTCF_TIP\"),     read_count = c(150, 200),     peak_count = c(100, 120) ) segregated_input <- segregate_seqs(input$peaks[[1]], input$peaks[[2]]) motifs <- list(     motifs = list(motif_MA1930.2, motif_MA1102.3),     motif_labels = list(\"MA1930.2\", \"MA1102.3\") )      # \\donttest{     if (requireNamespace(\"BSgenome.Hsapiens.UCSC.hg38\")) {         genome_build <-             BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38         enrichment_df <- get_df_enrichment(             input, segregated_input, motifs, genome_build,             reference_index = 1, workers = 1         )         label_colours <- c(\"red\", \"cyan\")              plt <- plot_enrichment_overall(         enrichment_df, motif_i = 1, label_colours = label_colours,         reference_label = \"CTCF_ChIP\", html_tags = FALSE         )         print(plt$count_plot)         print(plt$perc_plot)     } #> NULL #> NULL # }"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_motif_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce heat maps of motif similarity matrices — plot_motif_comparison","title":"Produce heat maps of motif similarity matrices — plot_motif_comparison","text":"Produce heat maps motif similarity matrices","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_motif_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce heat maps of motif similarity matrices — plot_motif_comparison","text":"","code":"plot_motif_comparison(   comparison_matrices,   exp_labels,   height = NULL,   width = NULL,   html_tags = TRUE )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_motif_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce heat maps of motif similarity matrices — plot_motif_comparison","text":"comparison_matrices Output compare_motifs one comparison pair (Four matrices). exp_labels Labels reference comparison experiments respectively. width, height width height output htmlwidget, output file exporting png/pdf/etc. Presumed pixels, plotly internal function decides units may end huge file! Default 800x500 exporting file, 100 htmlwidget. html_tags Logical. TRUE, returns plot tagList object.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/plot_motif_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce heat maps of motif similarity matrices — plot_motif_comparison","text":"list individual heat maps four matrices. html_tags TRUE, output wrapped HTML tags.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pretty_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numbers to more readable strings — pretty_number","title":"Convert numbers to more readable strings — pretty_number","text":"Format raw numbers readable strings. example, 1000 converted \"1K\". Supported suffixes \"K\", \"M\", \"B\".","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pretty_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numbers to more readable strings — pretty_number","text":"","code":"pretty_number(x, decimal_digits = 2)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pretty_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numbers to more readable strings — pretty_number","text":"x number. decimal_digits Number decimal digits round .","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pretty_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert numbers to more readable strings — pretty_number","text":"character string formatted number. NA returned \"NA\".","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/pretty_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert numbers to more readable strings — pretty_number","text":"","code":"print(MotifPeeker:::pretty_number(134999)) #> [1] \"135K\""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_DT.html","id":null,"dir":"Reference","previous_headings":"","what":"Print DT table — print_DT","title":"Print DT table — print_DT","text":"Print DT table","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_DT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print DT table — print_DT","text":"","code":"print_DT(df, ..., html_tags = FALSE, extra = FALSE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_DT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print DT table — print_DT","text":"df Dataframe/tibble printed. ... Arguments passed DT::datatable data data object (either matrix data frame) options list initialization options (see https://datatables.net/reference/option/); character options wrapped JS() treated literal JavaScript code instead normal character strings; can also set options globally via options(DT.options = list(...)), global options merged options argument set class CSS class(es) table; see https://datatables.net/manual/styling/classes callback body JavaScript callback function argument table applied DataTables instance (.e. table) rownames TRUE (show row names) FALSE (hide row names) character vector row names; default, row names displayed first column table exist (NULL) colnames missing, column names data; otherwise can unnamed character vector names want show table header instead default data column names; alternatively, can provide named numeric character vector form 'newName1' = i1, 'newName2' = i2 c('newName1' = 'oldName1', 'newName2' = 'oldName2', ...), newName new name want show table, oldName index current column name container sketch HTML table filled data cells; default, generated htmltools::tags$table() table header consisting column names data caption table caption; character vector tag object generated htmltools::tags$caption() filter whether/use column filters; none: filters; bottom/top: put column filters bottom/top table; range sliders used filter numeric/date/time columns, select lists used factor columns, text input boxes used character columns; want control styles filters, can provide named list argument; see Details escape whether escape HTML entities table: TRUE means escape whole table, FALSE means escape ; alternatively, can specify numeric column indices column names indicate columns escape, e.g. 1:5 (first 5 columns), c(1, 3, 4), c(-1, -3) (columns except first third), c('Species', 'Sepal.Length'); since row names take first column display, add numeric column indices one using rownames style either 'auto', 'default', 'bootstrap', 'bootstrap4'. 'auto', **bslib** theme currently active, bootstrap styling used way \"just works\" active theme. Otherwise, DataTables 'default' styling used. set explicitly 'bootstrap' 'bootstrap4', one must take care ensure Bootstrap's HTML dependencies (well Bootswatch themes, desired) included page. Note, set explicitly, user's responsibility ensure one unique `style` value used page, multiple DT tables exist, different styling resources may conflict . width,height Width/Height pixels (optional, defaults automatic sizing) elementId id widget (random string default). fillContainer TRUE configure table automatically fill containing element. table fit fully container vertical /horizontal scrolling table cells occur. autoHideNavigation TRUE automatically hide navigational UI (display table body) number total records less page size. Note, works client-side processing mode `pageLength` option provided explicitly. selection row/column selection mode (single multiple selection disable selection) table widget rendered Shiny app; alternatively, can use list form list(mode = 'multiple', selected = c(1, 3, 8), target = 'row', selectable = c(-2, -3)) pre-select rows control selectable range; element target list can 'column' enable column selection, 'row+column' make possible select rows columns (click footer select columns), 'cell' select cells. See details section info. extensions character vector names DataTables extensions (https://datatables.net/extensions/index) plugins character vector names DataTables plug-ins (https://rstudio.github.io/DT/plugins.html).  Note plugins supported DT package can used . can see available plugins calling DT:::available_plugins() editable FALSE disable table editor, TRUE (\"cell\") enable editing single cell. Alternatively, can set \"row\" able edit row, \"column\" edit column, \"\" edit cells current page table. modes, start editing doubleclicking cell. argument can also list form list(target = TARGET, disable = list(columns = INDICES)), TARGET can \"cell\", \"row\", \"column\", \"\", INDICES integer vector column indices. Use list form want disable editing certain columns. can also restrict editing accept numbers setting argument list form list(target = TARGET, numeric = INDICES) INDICES can vector indices columns want restrict editing numbers \"\" restrict editing numbers columns. set numeric, editing restricted numbers numeric columns; set numeric = \"none\" disable behavior. also possible edit cells text areas, useful large contents. , set editable argument list form list(target = TARGET, area = INDICES) INDICES can vector indices columns want text areas, \"\" want text areas columns. course, can request numeric editing columns text areas columns setting editable list form list(target = TARGET, numeric = INDICES1, area = INDICES2). Finally, can edit date cells calendar list(target = TARGET, date = INDICES); target columns must Date type. set date editable list, editing calendar automatically set Date columns. html_tags Logical. TRUE, returns table tagList object. extra Logical. TRUE, adds extra options like search datatable.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_DT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print DT table — print_DT","text":"DT object suitable used print().","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_denovo_sections.html","id":null,"dir":"Reference","previous_headings":"","what":"Print denovo motif enrichment datatable and download buttons for related files. — print_denovo_sections","title":"Print denovo motif enrichment datatable and download buttons for related files. — print_denovo_sections","text":"Print denovo motif enrichment datatable download buttons related files.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_denovo_sections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print denovo motif enrichment datatable and download buttons for related files. — print_denovo_sections","text":"","code":"print_denovo_sections(   motif_list,   similar_motifs,   segregated_peaks,   indices,   jaspar_link = FALSE,   download_buttons = NULL )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_denovo_sections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print denovo motif enrichment datatable and download buttons for related files. — print_denovo_sections","text":"motif_list list motifs discovered find_motifs, one comparison pair. similar_motifs list similar motifs discovered using motif_similarity, one comparison pair. segregated_peaks list peaks segregated common unique groups, one comparison pair. indices list indices print datatable download buttons . jaspar_link logical indicating whether include link JASPAR database motifs. set TRUE motifs JASPAR format (example: \"MA1930.1\"). download_buttons Embed download buttons generated using get_download_buttons. set NULL, download buttons added.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_denovo_sections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print denovo motif enrichment datatable and download buttons for related files. — print_denovo_sections","text":"Null","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the labels of the reference and comparison experiments — print_labels","title":"Print the labels of the reference and comparison experiments — print_labels","text":"Print labels reference comparison experiments","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the labels of the reference and comparison experiments — print_labels","text":"","code":"print_labels(   exp_labels,   reference_index,   comparison_index,   header_type,   read_counts = NULL )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the labels of the reference and comparison experiments — print_labels","text":"exp_labels character vector experiment labels. reference_index index reference experiment. comparison_index index comparison experiment. header_type Label section print header . Options : \"known_motif\" \"denovo_motif\". read_counts numeric vector read counts experiment. (optional)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/print_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the labels of the reference and comparison experiments — print_labels","text":"None (invisible NULL)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/random_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a random string — random_string","title":"Generate a random string — random_string","text":"Generate random string","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/random_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a random string — random_string","text":"","code":"random_string(length)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/random_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a random string — random_string","text":"length length random string generate.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/random_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a random string — random_string","text":"random string specified length.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_motif_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a motif file — read_motif_file","title":"Read a motif file — read_motif_file","text":"read_motif_file() reads motif file converts PWM. function supports multiple motif formats, including \"homer\", \"jaspar\", \"meme\", \"transfac\" \"uniprobe\".","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_motif_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a motif file — read_motif_file","text":"","code":"read_motif_file(   motif_file,   motif_id = \"Unknown\",   file_format = \"auto\",   verbose = FALSE )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_motif_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a motif file — read_motif_file","text":"motif_file Path motif file universalmotif-class object. motif_id ID motif (e.g. \"MA1930.1\"). file_format Character string specifying format motif file. options \"homer\", \"jaspar\", \"meme\", \"transfac\" \"uniprobe\" verbose logical indicating whether print messages.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_motif_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a motif file — read_motif_file","text":"universalmotif motif object.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_motif_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a motif file — read_motif_file","text":"","code":"motif_file <- system.file(\"extdata\",                           \"motif_MA1930.2.jaspar\",                           package = \"MotifPeeker\") res <- read_motif_file(motif_file = motif_file,                        motif_id = \"MA1930.2\",                        file_format = \"jaspar\") #> Warning: subscript out of bounds (index 0 >= vector size 0) print(res) #>  #>        Motif name:   MA1930.2 #>    Alternate name:   CTCF #>          Alphabet:   DNA #>              Type:   PCM #>           Strands:   +- #>          Total IC:   20.69 #>       Pseudocount:   1 #>         Consensus:   CTGCAGTNCNNNNNNNNNNCCASYAGRKGGCRS #>  #>      C    T    G    C    A    G    T    N    C    N   N   N    N   N   N   N #> A  293  242   41   86 1986  445  158  346  453  497 714 536  467 664 563 593 #> C 1497  107   35 2129  127  366  278  324 1333 1129 794 855 1138 604 730 902 #> G  400  144 2476   25  155 1456  179  892  328  419 623 770  561 376 541 494 #> T  386 2083   24  336  308  309 1961 1014  462  531 445 415  410 932 742 587 #>     N    N    N    C    C    A    S    Y    A    G    R    K    G    G    C #> A 452  560  604  178   38 1906  127  348 2179   32 1140  169   62  119  335 #> C 781  458  300 2074 2515   97 1409 1016   54    9   14   71   14  138 1833 #> G 393 1041 1242  155    9  275  961  175  212 2527 1399 1208 2472 2117   86 #> T 950  517  430  169   14  298   79 1037  131    8   23 1128   28  202  322 #>      R    S #> A 1021  279 #> C  164 1307 #> G 1161  740 #> T  230  250"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read MACS2/3 narrowPeak or SEACR BED peak file — read_peak_file","title":"Read MACS2/3 narrowPeak or SEACR BED peak file — read_peak_file","text":"function reads MACS2/3 narrowPeak SEACR BED peak file returns GRanges object peak coordinates summit.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read MACS2/3 narrowPeak or SEACR BED peak file — read_peak_file","text":"","code":"read_peak_file(peak_file, file_format = \"auto\", verbose = FALSE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read MACS2/3 narrowPeak or SEACR BED peak file — read_peak_file","text":"peak_file character string path peak file, GRanges object created using read_peak_file(). file_format character string specifying format peak file. \"narrowpeak\": MACS2/3 narrowPeak format. \"bed\": SEACR BED format. verbose logical indicating whether print messages.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read MACS2/3 narrowPeak or SEACR BED peak file — read_peak_file","text":"GRanges-class object peak coordinates summit.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read MACS2/3 narrowPeak or SEACR BED peak file — read_peak_file","text":"summit column absolute genomic position peak, relative start position sequence range. SEACR BED files, summit column calculated midpoint max signal region.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read MACS2/3 narrowPeak or SEACR BED peak file — read_peak_file","text":"","code":"macs3_peak_file <- system.file(\"extdata\", \"CTCF_ChIP_peaks.narrowPeak\", package = \"MotifPeeker\") macs3_peak_read <- read_peak_file(macs3_peak_file) macs3_peak_read #> GRanges object with 209 ranges and 7 metadata columns: #>                    seqnames            ranges strand |             name #>                       <Rle>         <IRanges>  <Rle> |      <character> #>     ChIPseq_peak_1    chr10 65672891-65673094      * |   ChIPseq_peak_1 #>     ChIPseq_peak_2    chr10 66112133-66112279      * |   ChIPseq_peak_2 #>     ChIPseq_peak_3    chr10 66180787-66181041      * |   ChIPseq_peak_3 #>     ChIPseq_peak_4    chr10 66215124-66215282      * |   ChIPseq_peak_4 #>     ChIPseq_peak_5    chr10 66277566-66277829      * |   ChIPseq_peak_5 #>                ...      ...               ...    ... .              ... #>   ChIPseq_peak_205    chr10 74244202-74244399      * | ChIPseq_peak_205 #>   ChIPseq_peak_206    chr10 74266052-74266297      * | ChIPseq_peak_206 #>   ChIPseq_peak_207    chr10 74419925-74420183      * | ChIPseq_peak_207 #>   ChIPseq_peak_208    chr10 74738977-74739145      * | ChIPseq_peak_208 #>   ChIPseq_peak_209    chr10 74826600-74826822      * | ChIPseq_peak_209 #>                        score signalValue    pValue    qValue      peak #>                    <numeric>   <numeric> <numeric> <numeric> <integer> #>     ChIPseq_peak_1       132     9.71581  16.61240  13.21760        91 #>     ChIPseq_peak_2        47     5.72046   7.95781   4.74195        77 #>     ChIPseq_peak_3       250    13.60270  28.62760  25.05950       117 #>     ChIPseq_peak_4        98     7.90847  13.19130   9.85816        52 #>     ChIPseq_peak_5       343    16.08460  38.04630  34.35700       126 #>                ...       ...         ...       ...       ...       ... #>   ChIPseq_peak_205       144     9.44644  17.88500  14.46760        91 #>   ChIPseq_peak_206       613    21.78070  65.40130  61.39370       110 #>   ChIPseq_peak_207       457    18.43810  49.55520  45.72990       134 #>   ChIPseq_peak_208        66     6.52919   9.93714   6.66903        96 #>   ChIPseq_peak_209       192    11.78170  22.77100  19.28080       112 #>                       summit #>                    <integer> #>     ChIPseq_peak_1  65672982 #>     ChIPseq_peak_2  66112210 #>     ChIPseq_peak_3  66180904 #>     ChIPseq_peak_4  66215176 #>     ChIPseq_peak_5  66277692 #>                ...       ... #>   ChIPseq_peak_205  74244293 #>   ChIPseq_peak_206  74266162 #>   ChIPseq_peak_207  74420059 #>   ChIPseq_peak_208  74739073 #>   ChIPseq_peak_209  74826712 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_macs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read MACS2/3 narrowPeak peak file — read_peak_file_macs","title":"Read MACS2/3 narrowPeak peak file — read_peak_file_macs","text":"function reads MACS2/3 narrowPeak peak file returns GRanges object peak coordinates summit.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_macs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read MACS2/3 narrowPeak peak file — read_peak_file_macs","text":"","code":"read_peak_file_macs(peak_file)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_macs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read MACS2/3 narrowPeak peak file — read_peak_file_macs","text":"peak_file character string path peak file, GRanges object created using read_peak_file().","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_macs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read MACS2/3 narrowPeak peak file — read_peak_file_macs","text":"GRanges-class object peak coordinates summit.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_macs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read MACS2/3 narrowPeak peak file — read_peak_file_macs","text":"summit column absolute genomic position peak, relative start position sequence range. SEACR BED files, summit column calculated midpoint max signal region.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_macs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read MACS2/3 narrowPeak peak file — read_peak_file_macs","text":"","code":"macs3_peak_file <- system.file(\"extdata\", \"CTCF_ChIP_peaks.narrowPeak\", package = \"MotifPeeker\") macs3_peak_read <- read_peak_file(macs3_peak_file) macs3_peak_read #> GRanges object with 209 ranges and 7 metadata columns: #>                    seqnames            ranges strand |             name #>                       <Rle>         <IRanges>  <Rle> |      <character> #>     ChIPseq_peak_1    chr10 65672891-65673094      * |   ChIPseq_peak_1 #>     ChIPseq_peak_2    chr10 66112133-66112279      * |   ChIPseq_peak_2 #>     ChIPseq_peak_3    chr10 66180787-66181041      * |   ChIPseq_peak_3 #>     ChIPseq_peak_4    chr10 66215124-66215282      * |   ChIPseq_peak_4 #>     ChIPseq_peak_5    chr10 66277566-66277829      * |   ChIPseq_peak_5 #>                ...      ...               ...    ... .              ... #>   ChIPseq_peak_205    chr10 74244202-74244399      * | ChIPseq_peak_205 #>   ChIPseq_peak_206    chr10 74266052-74266297      * | ChIPseq_peak_206 #>   ChIPseq_peak_207    chr10 74419925-74420183      * | ChIPseq_peak_207 #>   ChIPseq_peak_208    chr10 74738977-74739145      * | ChIPseq_peak_208 #>   ChIPseq_peak_209    chr10 74826600-74826822      * | ChIPseq_peak_209 #>                        score signalValue    pValue    qValue      peak #>                    <numeric>   <numeric> <numeric> <numeric> <integer> #>     ChIPseq_peak_1       132     9.71581  16.61240  13.21760        91 #>     ChIPseq_peak_2        47     5.72046   7.95781   4.74195        77 #>     ChIPseq_peak_3       250    13.60270  28.62760  25.05950       117 #>     ChIPseq_peak_4        98     7.90847  13.19130   9.85816        52 #>     ChIPseq_peak_5       343    16.08460  38.04630  34.35700       126 #>                ...       ...         ...       ...       ...       ... #>   ChIPseq_peak_205       144     9.44644  17.88500  14.46760        91 #>   ChIPseq_peak_206       613    21.78070  65.40130  61.39370       110 #>   ChIPseq_peak_207       457    18.43810  49.55520  45.72990       134 #>   ChIPseq_peak_208        66     6.52919   9.93714   6.66903        96 #>   ChIPseq_peak_209       192    11.78170  22.77100  19.28080       112 #>                       summit #>                    <integer> #>     ChIPseq_peak_1  65672982 #>     ChIPseq_peak_2  66112210 #>     ChIPseq_peak_3  66180904 #>     ChIPseq_peak_4  66215176 #>     ChIPseq_peak_5  66277692 #>                ...       ... #>   ChIPseq_peak_205  74244293 #>   ChIPseq_peak_206  74266162 #>   ChIPseq_peak_207  74420059 #>   ChIPseq_peak_208  74739073 #>   ChIPseq_peak_209  74826712 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_seacr.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SEACR BED peak file — read_peak_file_seacr","title":"Read SEACR BED peak file — read_peak_file_seacr","text":"function reads SEACR BED peak file returns GRanges object peak coordinates summit.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_seacr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SEACR BED peak file — read_peak_file_seacr","text":"","code":"read_peak_file_seacr(peak_file)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_seacr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SEACR BED peak file — read_peak_file_seacr","text":"peak_file character string path peak file, GRanges object created using read_peak_file().","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_seacr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SEACR BED peak file — read_peak_file_seacr","text":"GRanges-class object peak coordinates summit.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/read_peak_file_seacr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read SEACR BED peak file — read_peak_file_seacr","text":"summit column absolute genomic position peak, relative start position sequence range. SEACR BED files, summit column calculated midpoint max signal region.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/report_command.html","id":null,"dir":"Reference","previous_headings":"","what":"Report command — report_command","title":"Report command — report_command","text":"Reconstruct MotifPeeker command parameters used generate HTML report.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/report_command.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report command — report_command","text":"","code":"report_command(params)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/report_command.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report command — report_command","text":"params list parameters used generate HTML report.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/report_command.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report command — report_command","text":"character string containing reconstructed MotifPeeker command.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/report_command.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report command — report_command","text":"","code":"MotifPeeker:::report_command(params = list(    alignment_files = c(\"file1.bam\", \"file2.bam\"),    exp_labels = c(\"exp1\", \"exp2\"),    genome_build = \"hg19\")) #> [1] \"<pre><code class='language-r'>MotifPeeker(alignment_files = list(\\\"file1.bam\\\", \\\"file2.bam\\\"),\\n            exp_labels = list(\\\"exp1\\\", \\\"exp2\\\"),\\n            genome_build = \\\"hg19\\\")<\/code><\/pre>\""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/report_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Report header — report_header","title":"Report header — report_header","text":"Credit: function adapted EpiCompare package.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/report_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report header — report_header","text":"","code":"report_header()"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/report_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report header — report_header","text":"Header string rendering within Rmarkdown file.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/report_header.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report header — report_header","text":"Generate header MotifPeeker reports generated using MotifPeeker.Rmd template.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/report_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report header — report_header","text":"","code":"MotifPeeker:::report_header() #> [1] \"<div class='report-header'><a href='https://github.com/neurogenomics/MotifPeeker' target='_blank'><code>MotifPeeker<\/code><\/a><code>Report<\/code><a href='https://github.com/neurogenomics/MotifPeeker' target='_blank'><img src='/__w/_temp/Library/MotifPeeker/hex/hex.png' height='100'><\/a><\/div>\""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/save_peak_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimally save a peak object to a file (BED4) — save_peak_file","title":"Minimally save a peak object to a file (BED4) — save_peak_file","text":"function saves peak object file BED4 format. included columns : chr, start, end, name. Since strand data included, recommended use function peak objects strand information.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/save_peak_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimally save a peak object to a file (BED4) — save_peak_file","text":"","code":"save_peak_file(   peak_obj,   save = TRUE,   filename = random_string(10),   out_dir = tempdir() )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/save_peak_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimally save a peak object to a file (BED4) — save_peak_file","text":"peak_obj GRanges object peak coordinates. Must include columns: seqnames, start, end, name. save logical indicating whether save peak object file. filename character string file name. file extension .bed, warning issued extension appended. Alternatively, file name extension, .bed appended. (default = random string) out_dir character string output directory. (default = tempdir())","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/save_peak_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimally save a peak object to a file (BED4) — save_peak_file","text":"save = FALSE, data frame peak coordinates. save = TRUE, path saved file.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/save_peak_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimally save a peak object to a file (BED4) — save_peak_file","text":"","code":"data(\"CTCF_ChIP_peaks\", package = \"MotifPeeker\")  out <- save_peak_file(CTCF_ChIP_peaks, save = TRUE, \"test_peak_file.bed\") print(out) #> [1] \"/tmp/RtmpTvT1EX/test_peak_file.bed\""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/segregate_seqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Segregate input sequences into common and unique groups — segregate_seqs","title":"Segregate input sequences into common and unique groups — segregate_seqs","text":"function takes two sets sequences segregates common unique sequences. common sequences sequences present sets sequences. unique sequences sequences present one sets sequences.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/segregate_seqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segregate input sequences into common and unique groups — segregate_seqs","text":"","code":"segregate_seqs(seqs1, seqs2)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/segregate_seqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segregate input sequences into common and unique groups — segregate_seqs","text":"seqs1 set sequences (GRanges object) seqs2 set sequences (GRanges object)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/segregate_seqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segregate input sequences into common and unique groups — segregate_seqs","text":"list containing common sequences unique sequences set sequences. list contains following GRanges objects: common_seqs1: Common sequences seqs1 common_seqs2: Common sequences seqs2 unique_seqs1: Unique sequences seqs1 unique_seqs2: Unique sequences seqs2","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/segregate_seqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segregate input sequences into common and unique groups — segregate_seqs","text":"Sequences considered common base pairs align position, even vary length. Consequently, number common sequences remains consistent sets, length composition sequences may differ. result, function returns distinct sets common sequences input set sequences.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/segregate_seqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segregate input sequences into common and unique groups — segregate_seqs","text":"","code":"data(\"CTCF_ChIP_peaks\", package = \"MotifPeeker\") data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\")  seqs1 <- CTCF_ChIP_peaks seqs2 <- CTCF_TIP_peaks res <- segregate_seqs(seqs1, seqs2) print(res) #> $common_seqs1 #> GRanges object with 127 ranges and 7 metadata columns: #>                    seqnames            ranges strand |             name #>                       <Rle>         <IRanges>  <Rle> |      <character> #>     ChIPseq_peak_3    chr10 66180787-66181041      * |   ChIPseq_peak_3 #>     ChIPseq_peak_6    chr10 66455384-66455636      * |   ChIPseq_peak_6 #>     ChIPseq_peak_7    chr10 66586154-66586345      * |   ChIPseq_peak_7 #>     ChIPseq_peak_8    chr10 66627231-66627517      * |   ChIPseq_peak_8 #>     ChIPseq_peak_9    chr10 66925870-66926137      * |   ChIPseq_peak_9 #>                ...      ...               ...    ... .              ... #>   ChIPseq_peak_199    chr10 74081271-74081544      * | ChIPseq_peak_199 #>   ChIPseq_peak_200    chr10 74103609-74103897      * | ChIPseq_peak_200 #>   ChIPseq_peak_202    chr10 74153172-74153433      * | ChIPseq_peak_202 #>   ChIPseq_peak_206    chr10 74266052-74266297      * | ChIPseq_peak_206 #>   ChIPseq_peak_207    chr10 74419925-74420183      * | ChIPseq_peak_207 #>                        score signalValue    pValue    qValue      peak #>                    <numeric>   <numeric> <numeric> <numeric> <integer> #>     ChIPseq_peak_3       250     13.6027   28.6276   25.0595       117 #>     ChIPseq_peak_6       398     17.2191   43.6096   39.8530       112 #>     ChIPseq_peak_7       245     13.3070   28.1324   24.5738        86 #>     ChIPseq_peak_8       556     20.9281   59.6139   55.6729       146 #>     ChIPseq_peak_9       635     22.0495   67.6284   63.5924       131 #>                ...       ...         ...       ...       ...       ... #>   ChIPseq_peak_199       956     26.9507  100.0720   95.6116       144 #>   ChIPseq_peak_200       335     15.2085   37.2591   33.5791       116 #>   ChIPseq_peak_202       430     16.4674   46.8334   43.0387       136 #>   ChIPseq_peak_206       613     21.7807   65.4013   61.3937       110 #>   ChIPseq_peak_207       457     18.4381   49.5552   45.7299       134 #>                       summit #>                    <integer> #>     ChIPseq_peak_3  66180904 #>     ChIPseq_peak_6  66455496 #>     ChIPseq_peak_7  66586240 #>     ChIPseq_peak_8  66627377 #>     ChIPseq_peak_9  66926001 #>                ...       ... #>   ChIPseq_peak_199  74081415 #>   ChIPseq_peak_200  74103725 #>   ChIPseq_peak_202  74153308 #>   ChIPseq_peak_206  74266162 #>   ChIPseq_peak_207  74420059 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $common_seqs2 #> GRanges object with 127 ranges and 7 metadata columns: #>                   seqnames            ranges strand |            name     score #>                      <Rle>         <IRanges>  <Rle> |     <character> <numeric> #>     TIPseq_peak_1    chr10 66180800-66181033      * |   TIPseq_peak_1        73 #>     TIPseq_peak_2    chr10 66455342-66455626      * |   TIPseq_peak_2        99 #>     TIPseq_peak_3    chr10 66586093-66586239      * |   TIPseq_peak_3        63 #>     TIPseq_peak_4    chr10 66627203-66627536      * |   TIPseq_peak_4       122 #>     TIPseq_peak_5    chr10 66925844-66926200      * |   TIPseq_peak_5       234 #>               ...      ...               ...    ... .             ...       ... #>   TIPseq_peak_171    chr10 74081300-74081610      * | TIPseq_peak_171        44 #>   TIPseq_peak_172    chr10 74103638-74103872      * | TIPseq_peak_172        75 #>   TIPseq_peak_174    chr10 74153189-74153455      * | TIPseq_peak_174       100 #>   TIPseq_peak_180    chr10 74265994-74266358      * | TIPseq_peak_180       142 #>   TIPseq_peak_181    chr10 74419929-74420132      * | TIPseq_peak_181       101 #>                   signalValue    pValue    qValue      peak    summit #>                     <numeric> <numeric> <numeric> <integer> <integer> #>     TIPseq_peak_1     7.26312  10.98040   7.31252        50  66180850 #>     TIPseq_peak_2     8.68181  13.84590   9.92037       142  66455484 #>     TIPseq_peak_3     6.18211   9.90174   6.32942        80  66586173 #>     TIPseq_peak_4     9.80905  16.47740  12.27160       114  66627317 #>     TIPseq_peak_5    14.14660  28.95280  23.43290       174  66926018 #>               ...         ...       ...       ...       ...       ... #>   TIPseq_peak_171     5.66751   7.86457   4.47255       134  74081434 #>   TIPseq_peak_172     7.39208  11.22360   7.53561       121  74103759 #>   TIPseq_peak_174     7.91950  14.01050  10.06950        65  74153254 #>   TIPseq_peak_180    10.25590  18.75230  14.29350       180  74266174 #>   TIPseq_peak_181     8.69840  14.05790  10.11420        58  74419987 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $unique_seqs1 #> GRanges object with 82 ranges and 7 metadata columns: #>                    seqnames            ranges strand |             name #>                       <Rle>         <IRanges>  <Rle> |      <character> #>     ChIPseq_peak_1    chr10 65672891-65673094      * |   ChIPseq_peak_1 #>     ChIPseq_peak_2    chr10 66112133-66112279      * |   ChIPseq_peak_2 #>     ChIPseq_peak_4    chr10 66215124-66215282      * |   ChIPseq_peak_4 #>     ChIPseq_peak_5    chr10 66277566-66277829      * |   ChIPseq_peak_5 #>    ChIPseq_peak_12    chr10 67476285-67476431      * |  ChIPseq_peak_12 #>                ...      ...               ...    ... .              ... #>   ChIPseq_peak_203    chr10 74213629-74213890      * | ChIPseq_peak_203 #>   ChIPseq_peak_204    chr10 74234663-74234817      * | ChIPseq_peak_204 #>   ChIPseq_peak_205    chr10 74244202-74244399      * | ChIPseq_peak_205 #>   ChIPseq_peak_208    chr10 74738977-74739145      * | ChIPseq_peak_208 #>   ChIPseq_peak_209    chr10 74826600-74826822      * | ChIPseq_peak_209 #>                        score signalValue    pValue    qValue      peak #>                    <numeric>   <numeric> <numeric> <numeric> <integer> #>     ChIPseq_peak_1       132     9.71581  16.61240  13.21760        91 #>     ChIPseq_peak_2        47     5.72046   7.95781   4.74195        77 #>     ChIPseq_peak_4        98     7.90847  13.19130   9.85816        52 #>     ChIPseq_peak_5       343    16.08460  38.04630  34.35700       126 #>    ChIPseq_peak_12        71     6.85832  10.48160   7.19900        76 #>                ...       ...         ...       ...       ...       ... #>   ChIPseq_peak_203       776    25.89270  81.79150  77.60160       120 #>   ChIPseq_peak_204        73     6.97553  10.67840   7.39263        80 #>   ChIPseq_peak_205       144     9.44644  17.88500  14.46760        91 #>   ChIPseq_peak_208        66     6.52919   9.93714   6.66903        96 #>   ChIPseq_peak_209       192    11.78170  22.77100  19.28080       112 #>                       summit #>                    <integer> #>     ChIPseq_peak_1  65672982 #>     ChIPseq_peak_2  66112210 #>     ChIPseq_peak_4  66215176 #>     ChIPseq_peak_5  66277692 #>    ChIPseq_peak_12  67476361 #>                ...       ... #>   ChIPseq_peak_203  74213749 #>   ChIPseq_peak_204  74234743 #>   ChIPseq_peak_205  74244293 #>   ChIPseq_peak_208  74739073 #>   ChIPseq_peak_209  74826712 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $unique_seqs2 #> GRanges object with 57 ranges and 7 metadata columns: #>                   seqnames            ranges strand |            name     score #>                      <Rle>         <IRanges>  <Rle> |     <character> <numeric> #>     TIPseq_peak_7    chr10 67284781-67284927      * |   TIPseq_peak_7        42 #>    TIPseq_peak_10    chr10 67531067-67531356      * |  TIPseq_peak_10        59 #>    TIPseq_peak_13    chr10 67779549-67779763      * |  TIPseq_peak_13        48 #>    TIPseq_peak_16    chr10 67838030-67838183      * |  TIPseq_peak_16        34 #>    TIPseq_peak_17    chr10 67849319-67849603      * |  TIPseq_peak_17        83 #>               ...      ...               ...    ... .             ...       ... #>   TIPseq_peak_176    chr10 74190108-74190333      * | TIPseq_peak_176        82 #>   TIPseq_peak_177    chr10 74224190-74224510      * | TIPseq_peak_177        78 #>   TIPseq_peak_178    chr10 74231494-74231667      * | TIPseq_peak_178        78 #>   TIPseq_peak_179    chr10 74243885-74244038      * | TIPseq_peak_179        64 #>   TIPseq_peak_182    chr10 74826265-74826421      * | TIPseq_peak_182        45 #>                   signalValue    pValue    qValue      peak    summit #>                     <numeric> <numeric> <numeric> <integer> <integer> #>     TIPseq_peak_7     5.16484   7.66518   4.29365        42  67284823 #>    TIPseq_peak_10     6.40051   9.51973   5.98156        84  67531151 #>    TIPseq_peak_13     5.32656   8.31207   4.88917        74  67779623 #>    TIPseq_peak_16     4.47387   6.76965   3.47941       125  67838155 #>    TIPseq_peak_17     7.77252  12.07180   8.32041       104  67849423 #>               ...         ...       ...       ...       ...       ... #>   TIPseq_peak_176     7.72798  11.99220   8.24690       144  74190252 #>   TIPseq_peak_177     7.30707  11.51720   7.81021       128  74224318 #>   TIPseq_peak_178     7.55650  11.53680   7.82873       111  74231605 #>   TIPseq_peak_179     6.73978  10.04360   6.45615        47  74243932 #>   TIPseq_peak_182     5.72697   7.96895   4.56751        20  74826285 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/stopper.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop messages — stopper","title":"Stop messages — stopper","text":"Conditionally print stop messages. Allows developers easily control verbosity functions,  meet Bioconductor requirements dictate stop message  must first stored variable passing stop.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/stopper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop messages — stopper","text":"","code":"stopper(..., v = TRUE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/stopper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop messages — stopper","text":"v Whether print messages .","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/stopper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop messages — stopper","text":"Null","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/summit_to_motif.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the distance between peak summits and motifs — summit_to_motif","title":"Calculate the distance between peak summits and motifs — summit_to_motif","text":"summit_to_motif() calculates distance motif nearest peak summit. runFimo memes package used recover locations motif.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/summit_to_motif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the distance between peak summits and motifs — summit_to_motif","text":"","code":"summit_to_motif(   peak_input,   motif,   fp_rate = 0.05,   genome_build,   out_dir = tempdir(),   meme_path = NULL,   verbose = FALSE,   ... )"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/summit_to_motif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the distance between peak summits and motifs — summit_to_motif","text":"peak_input Either path narrowPeak file GRanges peak object generated read_peak_file(). motif object class universalmotif. fp_rate desired false-positive rate. p-value threshold selected based value. default false-positive rate 0.05. genome_build genome build peak sequences derived . out_dir Location save 0-order background file. default, background file written temporary directory. meme_path path \"meme/bin/\" (default: NULL). use default search behavior described check_meme_install() unset. verbose logical indicating whether print verbose messages running function. (default = FALSE) ... Arguments passed memes::runFimo parse_genomic_coord logical(1) whether parse genomic position fasta headers. Fasta headers must UCSC format positions (ie \"chr:start-end\"), base 1 indexed (GRanges format). names fasta entries genomic coordinates parse_genomic_coord == TRUE, results contain genomic coordinates motif matches, otherwise FIMO return relative coordinates (.e. positions 1 length fasta entry). skip_matched_sequence logical(1) whether include DNA sequence match. Default: FALSE. Note: jobs complete faster set TRUE. add_sequence() can used lookup sequence data import parse_genomic_coord TRUE, setting flag strictly needed. max_strand match found strands, report strand best match (default: TRUE). text logical(1) (default: TRUE). output files created filesystem. results unsorted q-values computed. setting allows fast searches large inputs. set FALSE FIMO discard 50% lower significance matches >100,000 matches detected. text = FALSE also incur performance penalty must first read file disk, read memory. reasons, suggest keeping text = TRUE. silent logical(1) whether suppress stdout/stderr printing console (default: TRUE). command failing giving unexpected output, setting silent = FALSE can aid troubleshooting.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/summit_to_motif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the distance between peak summits and motifs — summit_to_motif","text":"list containing expanded GRanges peak object metadata columns relating motif positions along vector summit--motif distances valid peak.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/summit_to_motif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the distance between peak summits and motifs — summit_to_motif","text":"calculate p-value threshold desired false-positive rate, use approximate formula: $$p \\approx \\frac{fp\\_rate}{2 \\times \\text{average peak width}}$$ (Dervied FIMO documentation)","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/summit_to_motif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the distance between peak summits and motifs — summit_to_motif","text":"","code":"data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\") data(\"motif_MA1102.3\", package = \"MotifPeeker\")  res <- summit_to_motif(     peak_input = CTCF_TIP_peaks,     motif = motif_MA1102.3,     fp_rate = 5e-02,     genome_build = BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38 ) print(res) #> $peak_set #> GRanges object with 30 ranges and 10 metadata columns: #>                   seqnames            ranges strand |            name     score #>                      <Rle>         <IRanges>  <Rle> |     <character> <numeric> #>    TIPseq_peak_15    chr10 67788408-67788724      * |  TIPseq_peak_15       129 #>    TIPseq_peak_39    chr10 68988538-68988838      * |  TIPseq_peak_39       111 #>    TIPseq_peak_42    chr10 69179798-69180156      * |  TIPseq_peak_42        75 #>    TIPseq_peak_47    chr10 69408915-69409153      * |  TIPseq_peak_47       146 #>    TIPseq_peak_48    chr10 69413328-69413612      * |  TIPseq_peak_48       102 #>               ...      ...               ...    ... .             ...       ... #>   TIPseq_peak_157    chr10 73529363-73529638      * | TIPseq_peak_157       106 #>   TIPseq_peak_162    chr10 73849014-73849393      * | TIPseq_peak_162       137 #>   TIPseq_peak_163    chr10 73879729-73880038      * | TIPseq_peak_163       248 #>   TIPseq_peak_167    chr10 73957451-73957745      * | TIPseq_peak_167        73 #>   TIPseq_peak_170    chr10 73997853-73998166      * | TIPseq_peak_170        91 #>                   signalValue    pValue    qValue      peak    summit #>                     <numeric> <numeric> <numeric> <integer> <integer> #>    TIPseq_peak_15     9.06865   17.2614  12.96200       153  67788561 #>    TIPseq_peak_39     9.10857   15.2180  11.14710       168  68988706 #>    TIPseq_peak_42     7.28686   11.2099   7.52416       121  69179919 #>    TIPseq_peak_47     8.42133   19.1676  14.67840       110  69409025 #>    TIPseq_peak_48     7.00187   14.2174  10.25130       141  69413469 #>               ...         ...       ...       ...       ...       ... #>   TIPseq_peak_157     8.79456   14.6750  10.66540       105  73529468 #>   TIPseq_peak_162     9.57946   18.1045  13.72430       240  73849254 #>   TIPseq_peak_163    12.53940   30.6089  24.84330       140  73879869 #>   TIPseq_peak_167     6.58212   11.0334   7.35935       125  73957576 #>   TIPseq_peak_170     7.78776   12.9930   9.14808       138  73997991 #>                   motif_start motif_end distance_to_summit #>                     <integer> <integer>          <numeric> #>    TIPseq_peak_15    67788624  67788631              -66.5 #>    TIPseq_peak_39    68988582  68988589              120.5 #>    TIPseq_peak_42    69179983  69179990              -67.5 #>    TIPseq_peak_47    69408938  69408945               83.5 #>    TIPseq_peak_48    69413548  69413555              -82.5 #>               ...         ...       ...                ... #>   TIPseq_peak_157    73529430  73529437               34.5 #>   TIPseq_peak_162    73849208  73849215               42.5 #>   TIPseq_peak_163    73879829  73879836               36.5 #>   TIPseq_peak_167    73957554  73957561               18.5 #>   TIPseq_peak_170    73998063  73998070              -75.5 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $distance_to_summit #>  [1]  -66.5  120.5  -67.5   83.5  -82.5  -48.5   25.5   50.5  -59.5  -19.5 #> [11]  -70.5 -110.5 -316.5  387.5  -45.5  -64.5   91.5  -60.5   48.5  -26.5 #> [21]   31.5 -107.5 -189.5 -146.5 -114.5   34.5   42.5   36.5   18.5  -75.5 #>"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/to_plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ggplot2 objects to plotly — to_plotly","title":"Convert ggplot2 objects to plotly — to_plotly","text":"Convert ggplot2 objects plotly","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/to_plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ggplot2 objects to plotly — to_plotly","text":"","code":"to_plotly(p, html_tags = TRUE, tooltip = \"text\", ...)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/to_plotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ggplot2 objects to plotly — to_plotly","text":"p ggplot2 object html_tags Logical. TRUE, returns plot tagList object. tooltip Character. tooltip display. Default \"text\". ... Arguments passed plotly::ggplotly width Width plot pixels (optional, defaults automatic sizing). height Height plot pixels (optional, defaults automatic sizing). dynamicTicks plotly.js dynamically generate axis tick labels? Dynamic ticks useful updating ticks response zoom/pan interactions; however, can always reproduce labels appear static ggplot2 image. layerData data layer returned? originalData \"original\" \"scaled\" data returned? source character string length 1. Match value string source argument event_data() retrieve event data corresponding specific plot (shiny apps can multiple plots).","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/to_plotly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ggplot2 objects to plotly — to_plotly","text":"plotly object.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/to_plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ggplot2 objects to plotly — to_plotly","text":"","code":"x <- data.frame(a = c(1,2,3), b = c(2,3,4)) p <- ggplot2::ggplot(x, ggplot2::aes(x = a, y = b)) + ggplot2::geom_point() MotifPeeker:::to_plotly(p, html_tags = FALSE)  {\"x\":{\"data\":[{\"x\":[1,2,3],\"y\":[2,3,4],\"text\":\"\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":5.6692913385826778,\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":23.305936073059364,\"r\":7.3059360730593621,\"b\":37.260273972602747,\"l\":43.105022831050235},\"plot_bgcolor\":\"rgba(235,235,235,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.90000000000000002,3.1000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"1.0\",\"1.5\",\"2.0\",\"2.5\",\"3.0\"],\"tickvals\":[1,1.5,2,2.5,3],\"categoryorder\":\"array\",\"categoryarray\":[\"1.0\",\"1.5\",\"2.0\",\"2.5\",\"3.0\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"a\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[1.8999999999999999,4.0999999999999996],\"tickmode\":\"array\",\"ticktext\":[\"2.0\",\"2.5\",\"3.0\",\"3.5\",\"4.0\"],\"tickvals\":[2,2.5,3,3.5,4],\"categoryorder\":\"array\",\"categoryarray\":[\"2.0\",\"2.5\",\"3.0\",\"3.5\",\"4.0\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"b\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"559d2b196b5e\":{\"x\":{},\"y\":{},\"type\":\"scatter\"}},\"cur_data\":\"559d2b196b5e\",\"visdat\":{\"559d2b196b5e\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/trim_seqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim sequences to a specified width around the summit — trim_seqs","title":"Trim sequences to a specified width around the summit — trim_seqs","text":"Trim sequences specified width around summit","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/trim_seqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim sequences to a specified width around the summit — trim_seqs","text":"","code":"trim_seqs(peaks, peak_width, genome_build, respect_bounds = TRUE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/trim_seqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim sequences to a specified width around the summit — trim_seqs","text":"peaks GRanges object created using read_peak_file(). peak_width Total expected width peak. genome_build genome build peak sequences derived . respect_bounds Logical indicating whether peak width respected trimming sequences. (default = TRUE) TRUE, trimmed sequences extend beyond peak boundaries.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/trim_seqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim sequences to a specified width around the summit — trim_seqs","text":"GRanges object trimmed sequences. sequences guaranteed exceed peak width + 1 (peak width + summit base).","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/trim_seqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim sequences to a specified width around the summit — trim_seqs","text":"","code":"data(\"CTCF_TIP_peaks\", package = \"MotifPeeker\") peaks <- CTCF_TIP_peaks genome_build <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38  trimmed_seqs <- MotifPeeker:::trim_seqs(peaks, peak_width = 100,                          genome_build = genome_build) summary(GenomicRanges::width(trimmed_seqs)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    59.0   101.0   101.0    98.5   101.0   101.0"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/use_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Check, add and access files in cache — use_cache","title":"Check, add and access files in cache — use_cache","text":"Query local BiocFileCache get cached version file add exist.","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/use_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check, add and access files in cache — use_cache","text":"","code":"use_cache(url, verbose = FALSE)"},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/use_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check, add and access files in cache — use_cache","text":"url character string specifying URL file check . verbose logical indicating whether print verbose messages running function. (default = FALSE)","code":""},{"path":"https://neurogenomics.github.io/MotifPeeker/reference/use_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check, add and access files in cache — use_cache","text":"character string specifying path cached file.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/news/index.html","id":"miscellaneous-0-99-5","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"MotifPeeker 0.99.5","text":"Replace magrittr import dplyr::%>%. Reduce number exported functions. Move utility functions ‘utilities.R’. Allow vignettes run without MEME suite installed.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/news/index.html","id":"miscellaneous-0-99-4","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"MotifPeeker 0.99.4","text":"Switch smaller file download check_ENCODE example. Move code outside \\donttest{} prevent BiocCheck() error missing examples.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/news/index.html","id":"miscellaneous-0-99-3","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"MotifPeeker 0.99.3","text":"Wrap certain examples \\donttest{} reduce R CMD CHECK runtime. [GitHub] Add CODECOV_TOKEN secret rworkflows. Skip running tests require download offline.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/news/index.html","id":"miscellaneous-0-99-2","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"MotifPeeker 0.99.2","text":"Substitute system() system2(). Reduce denovo_motifs examples tests reduce R CMD CHECK runtime. Add .BBSoptions .Rbuildignore.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/news/index.html","id":"miscellaneous-0-99-1","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"MotifPeeker 0.99.1","text":".BBSoptions added skip Windows builders Bioconductor.","code":""},{"path":[]},{"path":"https://neurogenomics.github.io/MotifPeeker/news/index.html","id":"new-features-0-99-0","dir":"Changelog","previous_headings":"","what":"New features","title":"MotifPeeker 0.99.0","text":"MotifPeeker submitted Bioconductor.","code":""}]
